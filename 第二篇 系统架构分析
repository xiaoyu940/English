We now begin the analysis of architecture in depth.
现在我们开始深入分析架构。
In Part 1, we built up a framework for analyzing systems, and we introduced some of the tools that will be useful in that analysis.
在第1部分中，我们构建了一个用于分析系统的框架，并介绍了一些对分析有用的工具。
Here in Part 2: Analysis of System Architecture, we will work to develop a deep understanding of form and function and will show that these are the building blocks of system architecture.
在第2部分:系统架构的分析中，我们将深入理解形式和功能，并说明这些是系统架构的构建块。
What is architecture?
建筑是什么?
Two possible definitions are: The arrangement of the functional elements into physical blocks.
两种可能的定义是:将功能元素排列成物理块。
Ulrich and Eppinger [1] The whole consists of parts;
乌尔里希和埃平格[1]整体由部分组成;
the parts have relationships to each other;
各部分之间有联系;
when put together, the whole has a designed purpose and fills a need.
当把它们放在一起时，它们就有了一个设计好的目的并满足了一个需求。
Reekie and McAdam [2] What these two definitions have in common is that they describe the key elements of a system: form and function, parts and whole, relationships, and emergence.
这两个定义的共同点是，它们描述了一个系统的关键要素:形式和功能，部分和整体，关系和出现。
Our experience is that there are many different definitions of architecture, which vary in their emphasis on form or function, and which vary enormously in the level of detail required.
根据我们的经验，架构有许多不同的定义，它们对形式或功能的强调不同，在所需的细节级别上也有很大的不同。
Consider two other definitions: The fundamental organization of a system, embodied in its components, their relationships to each other and to the environment, and the principles governing its design and evolution.
考虑其他两个定义:系统的基本组织，体现在其组件中，它们彼此之间和与环境的关系，以及控制其设计和演化的原则。
ISO/IEC/IEEE Standard 42010 [3] A formal description of a system, or a detailed plan of the system at component level to guide its implementation.
ISO/IEC/IEEE标准42010[3]对一个系统的正式描述，或在组件级指导其实现的系统的详细计划。
The Open Group Architecture Framework (TOGAF) [4] Notice that one definition connotes a high-level description ( fundamental organization, principles ), while the other emphasizes detail and implementation.
Open Group Architecture Framework (TOGAF)[4]注意，一个定义意味着一个高级描述(基本组织、原则)，而另一个强调细节和实现。
How much detail is required to capture architecture?
捕获架构需要多少细节?
The architecture of the system should ensure that the function and performance that are linked to benefit emerge.
系统的体系结构应该确保功能和性能与利益相关联。
Benefit is the worth, importance, or utility of a system as judged by a
效益是指系统的价值、重要性或效用
subjective observer.
主观的观察者。
Value will be defined here as the delivery of benefit at cost.
此处的价值定义为按成本交付收益。
A system can deliver high value by producing benefit at low cost, or high benefit at modest cost.
一个系统可以通过低成本产生效益来提供高价值，或者以适当的成本产生高效益。
A deeper discussion of value identification and delivery will be conducted in Chapters 5 and 11.
第5章和第11章将对价值识别和交付进行更深入的讨论。
We will develop a more detailed definition of architecture in Chapter 6, as we build up the ideas necessary for the analysis of architecture.
我们将在第6章中对架构进行更详细的定义，因为我们将为架构的分析建立必要的思想。
Our approach in Part 2 is to start with very simple systems, even though this may seem counterintuitive for a text on complex systems.
在第2部分中，我们的方法是从非常简单的系统开始，尽管这对于关于复杂系统的文本来说似乎违反直觉。
Our intent is to showcase the ideas of architecture in a context where the system can be fully represented all the pieces are present.
我们的目的是在一个系统可以被完全表示的上下文中展示架构的思想，所有的部分都在其中。
This alleviates concern that we have somehow left out the kernel of architecture by not representing enough detail, and we will show what information we believe is sufficient to capture the architecture of the system.
这缓解了我们由于没有表示足够的细节而忽略了体系结构核心的担忧，我们将显示我们认为哪些信息足以捕获系统的体系结构。
As we proceed through Part 2, we will work on progressively larger systems, but our intent remains to showcase methods and diagrams that can directly represent architecture.
随着第2部分的进行，我们将逐步处理更大的系统，但是我们的目的仍然是展示可以直接表示体系结构的方法和图表。
Then, in Part 3, we will turn to complex systems, where we will make use of the constituent ideas of architecture (such as form and function), but we will focus on architecture in a management context where specific diagram languages like OPM and SysML are not always appropriate.
然后，在第3部分中，我们将转向复杂系统，在其中我们将使用架构的组成思想(如形式和功能)，但是我们将重点关注管理环境中的架构，在这种环境中，特定的图语言(如OPM和SysML)并不总是合适的。
In order to allow the reader to reason from the concrete to the abstract, we will begin Part 2 with a discussion of the form of a system and then work toward function in Chapter 5 and the mapping of form to function to define architecture in Chapter 6.
为了让读者从具体到抽象进行推理，我们将在第2部分开始讨论系统的形式，然后在第5章讨论功能，在第6章讨论形式到功能的映射来定义架构。
This is the direction of reasoning in reverse engineering.
这就是逆向工程中推理的方向。
We just assume that the architecture exists and proceed to analyze it.
我们只是假设架构存在并继续分析它。
Learning analysis first creates the conditions for successful synthesis.
学习分析首先为成功的综合创造条件。
Chapter 7 adopts a forward engineering approach, examining how systems derive from a solution-neutral statement of function and arrive at a concept.
第7章采用了一个正向工程方法，研究系统如何从一个解决方案中立的功能陈述中派生出来，并达到一个概念。
Finally, in Chapter 8, we demonstrate how this concept flows to an architecture.
最后，在第8章中，我们演示了这个概念是如何应用到架构中的。

第4章 形式

4.1 Introduction We begin Part 2 with Form.
我们从表单开始第二部分。
This chapter lays the groundwork for the analysis of architecture by first defining its most concrete aspect, form.
本章通过首先定义其最具体的方面——形式，为架构的分析奠定了基础。
We will discuss form as an idea, the organization of form by decomposition and hierarchy, and the representation of form.
我们将讨论形式作为一种思想，通过分解和层次来组织形式，以及形式的表示。
Establishing a clear understanding of form is the foundation for the analysis of architecture.
建立对形式的清晰理解是建筑分析的基础。
We begin Chapter 4 with a rigorous discussion of form in Sections 4.2 and 4.3 and then address formal relationships in Section 4.4.
我们从第4章开始，在4.2节和4.3节中对形式进行了严格的讨论，然后在4.4节中讨论正式关系。
The context that surrounds the form of the system is described in Section 4.5.
围绕系统形式的上下文在第4.5节中描述。
Section 4.6 reviews the main ideas of form again via an example of a software system, the bubblesort algorithm.
第4.6节通过一个软件系统的例子，即bubblesort算法，再次回顾了form的主要思想。
In each of the chapters in Part 2, we will begin with a list of questions that guide us in the analysis of form and suggest the outline of the chapter.
在第二部分的每一章中，我们都将以一系列问题开始，这些问题将指导我们分析形式，并提出本章的大纲。
Table 4.1 also contains the outcomes produced by answering the questions.
表4.1还包含了回答这些问题所产生的结果。
4.2 Form in Architecture Form It is surprisingly difficult to separate form from function.
4.2形式在架构形式中，将形式与功能分离是非常困难的。
In common speech, we refer to form with function words.
在日常讲话中，我们用虚词来指代形式。
Try describing a paper coffee cup, a pencil, or a spiral notebook without any reference to function.
试着描述一个咖啡杯，一支铅笔，或者一个螺旋形的笔记本，不要提及任何功能。
If you used the words handle, eraser, and binding, you were using words rooted in a function.
如果使用了句柄、橡皮擦和绑定等词，那么就使用了以函数为根的词。
To stay entirely in the form domain, we might use flat cardboard half-circle, rubber cylinder, and metal spiral.
为了完全停留在形式领域，我们可以使用平面纸板半圆，橡胶圆筒，和金属螺旋。
One objective of this chapter is to clearly distinguish form from function.
本章的一个目的是明确区分形式和功能。
Form is what has been or is eventually implemented.
表单是已经实现或最终实现的。
Form is eventually built, written, composed, manufactured, or assembled.
形式最终是建造、书写、组成、制造或组装的。
Form is about existence.
形式关乎存在。
As indicated by the definition in Box 4.1, the first test for form is that it exists.
如4.1框中的定义所示，对form的第一个测试是它是否存在。
Form is what the system is.
系统就是形式。
It is the concrete and often visible manifestation of the system.
它是系统的具体的和经常可见的表现。
The clause for some period of time is included in the definition to enable us to discuss the form of things that have existed in the past (analysis of historical systems) or will exist in the future (analysis of system designs).
该条款在一段时间内被包含在定义中，使我们能够讨论过去存在(对历史系统的分析)或未来将存在(对系统设计的分析)的事物的形式。
The second test for form is that it is instrumental in the execution of function.
对形式的第二个测试是，它在功能的执行中是有用的。
For this function to occur, there usually needs to be some instrument to facilitate the function, or to carry the function.
为了实现这个函数，通常需要一些工具来促进这个函数，或者实现这个函数。
Form is what is eventually
形式是最终的结果
Form is the physical or informational embodiment of a system that exists or has the potential for stable, unconditional existence, for some period of time, and is instrumental in the execution of function.
形式是一个系统的物理或信息体现，该系统存在或有可能在一段时间内稳定地、无条件地存在，并在功能的执行中起辅助作用。
Form includes the entities of form and the formal relationships among the entities.
形式包括形式的实体和实体之间的形式关系。
Form exists prior to the execution of function.
形式存在于函数执行之前。
Form is a product/system attribute.
表单是产品/系统的属性。
Consider the beach house shown in Figure 4.1.
以图4.1所示的海滩别墅为例。
What is the form?
表格是什么?
The form can be interpreted as the spaces in the house the grand room, the kitchen, and so on.
这种形式可以解释为房子里的空间，大房间，厨房等等。
The kitchen space exists and facilitates food preparation and conversation (function).
厨房空间的存在促进了食物的准备和交谈(功能)。
In the emergency instructions shown in Figure 4.2, the structure is that some of the individual pictures are in sequence (reinforced by the numbering), and then, at a higher level, some of the sequenced pictures are prefaced by other, smaller pictures or letters.
在图4.2所示的紧急指令中，其结构是，一些单独的图片是按顺序排列的(通过编号加强)，然后，在较高的级别上，一些经过排序的图片以其他较小的图片或字母开头。
Form includes the sum of the entities, which are the elements or chunks of form.
表单包含实体的总和，这些实体是表单的元素或块。
These are elements of the whole, and this is the whole part relationship for form.
这些是整体的要素，这是形式的整体关系。
Form also includes the relationship among the entities of form, which is often called the structure.
形式还包括形式实体之间的关系，通常称为结构。
Form is the entities of form plus the structure.
形式是形式的实体加上结构。
In the case of the beach house, the formal relationships are easily represented by the floor plan, which shows the spatial relationships among the spaces.
在海滨别墅的案例中，平面很容易表现出正式的关系，它展示了各个空间之间的空间关系。
In the emergency instructions, the structure is that some of the individual pictures are in sequence (reinforced by the numbering), and then, at a higher level, some of the sequenced pictures are prefaced by other, smaller pictures and are in blocks indicated by horizontal rules.
在紧急指令中，结构是这样的:一些单独的图片是按顺序排列的(通过编号加强)，然后，在更高的层次上，一些经过排序的图片由其他较小的图片组成，并以水平规则表示。
Form is a system attribute;
表单是系统属性;
it is an independent way in which to view or characterize the system.
它是观察或描述系统的一种独立方式。
Form is also part of the solution that the architect is proposing.
形式也是建筑师提出的解决方案的一部分。
Figure 4.1 (a) a beach house as an example of civil architecture (b) spy glass house.
图4.1 (a)作为民用建筑范例的海滩住宅(b)间谍玻璃住宅。
(source: (a) and (b) the sater Design collection, inc.
(资料来源:(a)及(b)萨特设计收藏有限公司。
Figure 4.2 an emergency instruction card as an example of informational architecture.
图4.2一个应急指令卡作为信息架构的示例。
(source: copyright cabin safety international ltd.) Each discipline has developed its own shorthand for representing form.
每一门学科都发展出了自己的表示形式的简写。
Form was first represented by words, such as the way national constitutions describe the form of government.
形式首先是用词语来表示的，比如国家宪法描述政府形式的方式。
Next, representational maps and drawings were developed: illustrations, schematics, drawings, three-dimensional views, and perspective diagrams.
接下来，发展了具象的地图和图纸:插图、示意图、图纸、三维视图和透视图。
These attempt to represent some sub-scale yet realistic image of the system.
这些尝试代表一些亚尺度但真实的形象的系统。
Later, symbolic representations were developed: equations
后来，符号表示法得到了发展:方程式
pseudocode, circuit diagrams, and the like.
伪代码、电路图等。
The symbols used in these diagrams have only abstract meaning.
这些图表中使用的符号只有抽象的意义。
Analytical Representation of Form;
形式的分析表示;
Objects We seek a way to represent the form of any system natural, evolved, built, mechanical, electrical, biological, or informational with the same set of semantically exact representations.
对象我们寻求一种方式来表现任何系统的形式，自然的，进化的，建造的，机械的，电子的，生物的，或信息的同一套语义精确的表征。
These facilitate analysis, communication across disciplines, and the capture of knowledge.
这些有助于跨学科的分析、交流和知识的获取。
The representation we adopt in this text closely follows Dori s Object Process Methodology (Chapter 3). Dori determined that systems can be represented with only two classes of abstractions: objects and processes (hence the name).
我们在本文中采用的表示方法与Dori的对象过程方法(第3章)非常接近。Dori确定系统只能用两类抽象来表示:对象和过程(因此得名)。
Together, objects and processes faithfully describe the system s structure, function and behavior in a single, coherent model in virtually any domain.
在一起，对象和进程在一个单一的、一致的模型中忠实地描述了系统的结构、功能和行为，几乎在任何领域。
[1] The definition of an object in Box 4.2 was deliberately phrased in such a way that it closely reflects the first part of the definition of form, so that objects could be used to represent form.
在4.2框中，对象的定义被有意地表述为这样一种方式，它紧密地反映了形式定义的第一部分，因此对象可以用来表示形式。
However, the definition of form (Box 4.1) contains the additional criteria that the form must be instrumental of function and must exist before function.
然而，形式的定义(方框4.1)包含了附加的标准，即形式必须是功能的工具，必须先于功能而存在。
Objects that do not meet these additional criteria are operands, as discussed in Chapter 5.
不满足这些附加条件的对象是操作数，如第5章所述。
Generally, the names of objects are nouns.
物体的名称一般都是名词。
Figure 4.1 shows a beach house that is an object, which is both physical and tangible.
图4.1展示了一个海滩别墅，它是一个物体，既有形又有形。
The rooms of the house are also objects.
房子里的房间也是物件。
In Figure 4.2, the instructional drawings are objects, as are the smaller drawings to the upper left of the boxes.
在图4.2中，指导性的图形是对象，方框左上角的较小的图形也是对象。
Objects can also be informational.
对象也可以是信息性的。
Dori defines an informational object as anything that can be comprehended intellectually, which implies that it exists.
Dori将信息对象定义为任何可以被智力理解的事物，这意味着它存在。
Informational objects include ideas, thoughts, arguments, instructions, conditions, and data.
信息对象包括思想、思想、论据、指令、条件和数据。
Domains such as control systems, software, mathematics, and policy make extensive use of informational objects.
控制系统、软件、数学和策略等领域广泛使用了信息对象。
One of the defining characteristics of objects is that they have characteristics or attributes that describe the object.
对象的定义特征之一是它们具有描述对象的特征或属性。
An object can have physical, electrical, or logical attributes.
一个对象可以具有物理、电子或逻辑属性。
Some of these attributes can be considered as states, in which an object can exist for some duration of time.
其中一些属性可以视为状态，对象可以在状态中存在一段时间。
A process can change an object s state.
进程可以改变对象的状态。
The combination of all states describes the possible configuration of state of the object.
所有状态的组合描述了对象状态的可能配置。
When our beach house is being built, its state of construction goes from not built to built.
当我们的海滨别墅正在建造时，它的建设状态从没有建成到建成。
When people arrive, its state of occupancy goes from unoccupied to occupied.
当人们到达时，它的占用状态从无人占用变为有人占用。
When the furnace runs, its state of temperature goes from cooler to warmer.
当炉子运行时，它的温度状态从低到高。
In this example, the attributes and corresponding states are construction (unbuilt/built), occupancy (unoccupied/occupied), and temperature (cool/warm).
在这个示例中，属性和相应的状态是construction(未构建/构建)、occupancy(空闲/占用)和temperature(冷/暖)。
The graphical representations for an object are adopted from Object Process Methodology (OPM), where objects are denoted with rectangles (Figure 4.3).
对象的图形表示采用了对象处理方法(OPM)，其中对象用矩形表示(图4.3)。
The representation on the left
左边的表示
Figure 4.3 three oPm representations of objects: a simple object, an object with states illustrated, and an object with an attribute and states explicitly illustrated through the is characterized by relationship.
图4.3对象的三种oPm表示形式:一个简单对象、一个状态说明的对象、一个属性和状态通过关系说明的对象。
simply defines an object, and the one in the center shows possible states of the object.
简单地定义一个对象，中间的那个显示了对象的可能状态。
On the right, the double triangle on the line from the object to the attribute is read as the relationship is characterized by.
在右边，从对象到属性的那条线上的双三角形被读取为关系的特征。
The lower box lists the attribute and possible states.
下面的框列出了属性和可能的状态。
Note that objects in SysML have different representations, depending on whether they are physical objects, human operators or users, or something else.
请注意，SysML中的对象有不同的表示，这取决于它们是物理对象、人工操作符还是用户，还是其他东西。
Decomposition of Form Decomposing entities into appropriate abstractions was discussed in Section 3.3.
在第3.3节中讨论了将实体分解为适当的抽象。
Decomposing form comes naturally to architects.
对建筑师来说，分解形式是很自然的。
Form is concrete, it decomposes easily, and the aggregation of form traces the decomposition in a simple way.
形式是具体的，它易于分解，形式的聚集以一种简单的方式跟踪分解。
Decomposition is represented in OPM by a graphical tree diagram, as shown in Figure 4.4.
在OPM中分解用图形树形图表示，如图4.4所示。
The black triangle is used to indicate decomposition.
黑色三角形用于表示分解。
This diagram shows that System 0 (the object at Level 0) decomposes into the objects at Level 1, which correspondingly aggregate into System 0.
这个图显示了系统0(级别0的对象)分解为级别1的对象，这些对象相应地聚合为系统0。
In summary: Form is a system attribute that includes the elements that exist and are instrumental in the execution of function.
总而言之:形式是一种系统属性，它包含存在的元素，并在功能的执行中起到辅助作用。
Form is implemented and eventually operated.
表单被实现并最终操作。
Form will be modeled as objects of form, plus the formal structure among them.
形式将被建模为形式的对象，以及其中的正式结构。
Objects are static entities that exist and have attributes;
对象是存在并具有属性的静态实体;
among these are states that can be changed by a process.
其中的状态可以由流程更改。
Form can be decomposed into smaller entities of form, which in turn aggregate into larger entities of form.
形式可以分解为更小的形式实体，而这些实体又会聚合为更大的形式实体。
4.3 Analysis of Form in Architecture
With this background, let’s begin the analysis of the form of a real engineering system, the centrifugal pump of Figure 4.5. Box 4.3 contains an explanation of the principles of operation of this
pump. This example was chosen as the reference case because it is “modular”; the parts are not

Box 4.3 Insight: Centrifugal Pump How It Works A centrifugal pump works by increasing the energy of the fluid that passes through it.
离心泵的工作原理离心泵的工作原理是增加流经它的流体的能量。
The turning impeller does the work on the flow.
转动的叶轮对流体起作用。
Depending on the design of the pump, the increase in energy can be delivered either as an increase in velocity of the outlet flow or as an increase in static pressure.
根据泵的设计，能量的增加可以通过增加出口流速或增加静压来传递。
The flow enters the pump on the axis of rotation of the impeller through the hole in the center of the cover shown in Figure 4.5.
如图4.5所示，流体沿叶轮的旋转轴通过泵盖中心的孔进入泵内。
The impeller turns the flow radially and does work on the flow, increasing its velocity internal to the pump.
叶轮沿径向转动流动，并对流动进行工作，增加流向泵内部的流动速度。
The housing contains a passage that slows the velocity of the water, or diffuses the flow.
外壳包含一个通道，以减缓水的速度，或扩散的流动。
The newly gained energy is converted from kinetic energy into higher pressure.
新获得的能量从动能转化为更高的压强。
Mass is conserved, so the same amount of fluid exits the pump as enters it.
质量是守恒的，所以从泵中流出的液体和进入泵的液体是一样多的。
Energy is conserved, so the electrical power going into the electrical motor is reflected  in the increased pressure of the outlet mass flow.
能量是守恒的，所以进入电机的电能反映在出口质量流的压力增加。

absolutely discrete like the members of a team, nor are they integral like the parts of the heart.
像团队的成员一样是绝对离散的，也不像心脏的组成部分。
In addition, the pump has only nine parts.
此外，泵只有9个部件。
It is a simple system, judging on the basis of the guideline presented in Section 3.3 that we find atomic parts at Level 1.
这是一个简单的系统，根据3.3节中给出的准则判断，我们在第1级找到了原子部分。
We acknowledge that the pump is a simple, almost trivial example, and that applying the techniques of system architecture to such a simple system is like taking a sledge hammer to a thumb tack.
我们承认，泵是一个简单的、几乎微不足道的示例，而将系统架构技术应用到这样一个简单的系统就像大锤敲大头针。
However, we can learn a lot from a simple system before tackling a truly complex one.  
然而，在处理一个真正复杂的系统之前，我们可以从一个简单的系统中学到很多东西。
Defining the System We will use the questions in Table 4.1 to organize our discussion of form.
定义系统我们将使用表4.1中的问题来组织我们关于表单的讨论。
The first question asks us to identify the system and its form: What is the system?
第一个问题要求我们识别系统和它的形式:系统是什么?
The procedure to answer Question 4a is to examine the system and create an abstraction of form that conveys the important information and implies a boundary of the system that is consistent with the detailed boundary that will be drawn in answering Question 4e.
回答问题4a的过程是检查系统，并创建一个表达重要信息和暗示系统边界的抽象形式，该边界与将在回答问题4e中绘制的详细边界相一致。
Abstractions were discussed in Section 2.4.
在第2.4节中讨论了抽象。
For Question 4a in this case, we create the abstraction of form pump, which not only brings to the surface the idea of something that moves fluid but also hides all details of motors, impeller, and the like.
在本例中，对于问题4a，我们创建了form pump的抽象概念，它不仅将流体运动的概念呈现在表面，还隐藏了马达、叶轮等的所有细节。
We implicitly draw the system boundary around the parts listed in Figure 4.5, which separates the system from the context.
我们隐式地在图4.5中列出的部件周围绘制系统边界，它将系统从上下文中分离出来。
Outside the system, we presumably have the hoses that connect to the pump input or output, the mechanical support for the pump, and the controller and power supply for the motor.
在系统之外，我们可能有连接到泵输入或输出的软管，泵的机械支撑，以及电机的控制器和电源。
The outcome of this task is simply an object that represents the abstraction for the entire system, the object labeled Pump in Figure 4.6.
此任务的结果只是一个对象，它表示整个系统的抽象，即图4.6中标记为Pump的对象。
We could have chosen centrifugal pump as a more specific abstraction than pump for our system.
对于我们的系统，我们可以选择离心泵作为一个比泵更具体的抽象。
Other types of pumps include axial flow pumps and positive displacement pumps.
其他类型的泵包括轴流泵和容积泵。

Figure 4.6 shows the objects called pump and centrifugal pump connected by the OPM symbol for the specialization relationship (an unfilled triangle).
图4.6显示了称为泵和离心泵的对象之间由OPM符号连接的专门化关系(一个未填充的三角形)。
Specialization was introduced in Section 3.4 and is used extensively in design.
在第3.4节中介绍了专门化，并在设计中广泛使用。
Identifying the Entities of Form Continuing to Question 4b of Table 4.1, we now seek to identify the entities in the form domain called elements of form.
继续表4.1中的问题4b，我们现在试图识别表单域中的实体，称为表单元素。
The procedure to answer Question 4b is explained below by example.
下面通过示例说明回答问题4b的过程。
In brief, we will start with a reference parts list as the initial set of abstractions, decompose some elements further if necessary, combine or eliminate elements where possible, and use hierarchy to identify the most important elements of form.
简而言之，我们将从作为初始抽象集的引用部件列表开始，必要时进一步分解一些元素，可能时合并或删除元素，并使用层次结构来标识表单中最重要的元素。
The parts list for the pump is indicated by the numbered parts in Figure 4.5 and is a useful place to start creating abstractions.
泵的部件列表由图4.5中编号的部件指示，这是开始创建抽象的一个有用的位置。
For this simple pump system, we will use the parts list as the set of abstractions defining elements of form, with a few exceptions.
对于这个简单的泵系统，除了少数例外，我们将使用parts列表作为定义表单元素的抽象集。
The first is the motor, which actually has a non-rotating element and a rotating motor shaft.
第一个是马达，它实际上有一个非旋转元件和一个旋转马达轴。
Some elements connect to the motor and some connect to the shaft, and this difference is important.
有些元件连接到电机，有些连接到轴，这种区别是很重要的。
Calling all of this the motor would hide too much information.
把所有这些都称为马达会隐藏太多的信息。
Anticipating the internal function of the elements of form, one can guess that the shaft also is involved with different functions than the motor.
考虑到形式元素的内部功能，我们可以猜测，轴也涉及不同的功能，而不是马达。
Therefore, we create two elements to describe the motor and the motor shaft, producing the full list of entities in Figure 4.6.
因此，我们创建了两个元素来描述电机和电机轴，生成了图4.6中实体的完整列表。
To illustrate that this decomposition can be shown as a graph or as a list, we have included a list-like representation in Table 4.2.
为了说明这种分解可以显示为图或列表，我们在表4.2中包含了一个类似列表的表示。
In general, information about a system can be contained in a graph or list, and we will use the two interchangeably.
一般来说，关于系统的信息可以包含在一个图或列表中，我们将交替使用这两者。
A careful examination of Figure 4.5 reveals that there are five screws.
仔细检查图4.5，发现有五颗螺钉。
Yet in the decomposition of Figure 4.6, we identified only one abstraction, called screw.
然而在图4.6的分解中，我们只确定了一个抽象，称为screw。
Implicitly, we created a class called Screw and then identified five instances of the class.
我们隐式地创建了一个名为Screw的类，然后确定了这个类的五个实例。
The class/instance relationship was discussed in Section 3.4, and the OPM symbol was introduced in Table 3.2.
第3.4节讨论了类/实例关系，表3.2介绍了OPM符号。

It is not uncommon, in decomposing systems, to find entities that simply can be combined for convenience, because they are integrally part of delivering a single function.
在分解系统的过程中，找到可以方便地组合在一起的实体并不少见，因为它们是交付单个功能的整体组成部分。
For example, in the pump list of elements in Table 4.2, we could have combined the locking nut with the impeller, since the only function of the locking nut is to secure the impeller to the shaft.
例如，在表4.2的泵元件列表中，我们可以将锁紧螺母与叶轮结合，因为锁紧螺母的唯一作用就是将叶轮固定在轴上。
The Pump as a Medium-Complexity System If we briefly think of the pump as a medium-complexity system (in which we find atomic parts at Level 2), we can apply hierarchic reasoning, following the approach of Section 3.3.
如果我们简单地把泵看作是一个中等复杂度的系统(在其中我们在第2级找到原子部分)，我们可以按照3.3节的方法应用层次推理。
Remember that hierarchy is defined as a system in which grades are ranked one above the other because they have more scope, importance, performance, responsibility, or function.
请记住，等级制度是一种系统，在这种系统中，等级是一个比另一个高的，因为它们有更大的范围、重要性、性能、职责或功能。
Hierarchy can be applied to built systems.
可以将层次结构应用于已构建的系统。
A simple table showing hierarchy for the pump is shown in Table 4.3.
表4.3中有一个简单的表显示了泵的层次结构。
We identify five key parts: The cover and housing contain the fluid and provide interfaces;
我们确定了五个关键部分:外壳和外壳包含流体并提供接口;
the impeller does the work on the fluid;
叶轮对流体进行工作;
the motor drives the shaft and supports the housing;
电机驱动轴并支撑壳体;
and the motor shaft drives the impeller.
电机轴驱动叶轮。
We can also identify the fasteners as the least important elements, leaving the remaining three parts in the middle rank.
我们还可以将紧固件标识为最不重要的元素，将其余三个部分放在中间位置。
This table gives us a quite different impression than the graphical decomposition of Figure 4.6 and the list in Table 4.2.
这个表给我们的印象与图4.6的图形分解和表4.2中的列表完全不同。
Based on the information in Table 4.3, we might first try to reason about the five highest-grade objects, to understand them thoroughly before including the lower-priority elements.
根据表4.3中的信息，我们可以先尝试对5个最高级的对象进行推理，以便在包含较低优先级的元素之前对它们进行透彻的理解。
Figure 4.7 shows an OPM representation of a hierarchic decomposition that extends two levels down.
图4.7显示了向下扩展两层的层次分解的OPM表示。
There is no formal structure (other than decomposition) and no functional interaction implied by the diagram!
图中没有正式的结构(除了分解)，也没有功能交互!
Even though the pump has only ten entities of form, it is possible to convert its representation from a one-level decomposition (Figure 4.6) to a two-level decomposition, as shown in Figure 4.8.
即使这个泵只有10个实体的形式，也可以将它的表示从单级分解(图4.6)转换为两级分解，如图4.8所示。

The elements at Level 1 in Figure 4.8 are now not real parts but simply abstractions.
图4.8中级别1的元素现在不是真实的部分，而是简单的抽象。
In this case, the abstractions pump assembly and motor assembly were selected.
在这种情况下，选择了抽象的泵总成和电机总成。
These could have been chosen because the motor is highly integral and the other elements highly interconnected.
这些是可以选择的，因为电机是高度集成的，其他元素高度互联。
Or perhaps it was because the pump assembly has a distinct function (increase the pressure of water) and the motor has another distinct function (drive the pump).
或者可能是因为泵组件有一个独特的功能(增加水的压力)和电机有另一个独特的功能(驱动泵)。
The creation of Level 1 abstractions is not unique, as discussed in Section 3.3.
第1级抽象的创建并不是唯一的，如3.3节所讨论的那样。
For example, the Level 1 abstractions could have been rotating components (which would include the lock nut, impeller, water slinger, and motor shaft) and non-rotating components (the rest of the elements).
例如，第1级抽象可能是旋转组件(包括锁紧螺母、叶轮、水吊和电机轴)和非旋转组件(其余的元素)。
To summarize the approaches used to identify the entities of form of a medium-complexity system, consider the OPM diagram shown in Figure 4.9.
为了总结用于识别中等复杂度系统形式实体的方法，请考虑图4.9中所示的OPM图。
Starting at the top left, the more general idea of pump specializes (Section 3.4) to the more specific idea of centrifugal pump.
从左上方开始，泵的一般概念(第3.4节)专用于离心泵的更具体的概念。
Centrifugal pump decomposes through two levels of hierarchy (Section 3.3).
离心泵分为两层(第3.3节)。
At the first level, we have created the intermediate abstractions called pump assembly and motor assembly.
在第一级，我们创建了中间抽象，称为泵组件和电机组件。
These then decompose to ten elements of form.
这些然后分解成十个元素的形式。
One of these is in fact not a single object, but a class called Screw, of which there are actually several instances (Section 3.4).
其中一个实际上不是一个单独的对象，而是一个名为Screw的类，它实际上有几个实例(第3.4节)。
One of the other objects, the motor shaft, exhibits the attribute of state called spinning, which can have the states of yes (the shaft is turning) and no (it is not turning).
另一个对象，电机轴，显示了称为旋转的状态属性，它可以有“是”(轴在转动)和“否”(轴不转动)的状态。
In summary: Analyzing form requires creating an abstraction of form that conveys the important information, but not too much information, and implies a boundary of the system.
总而言之:分析表单需要创建一个抽象的表单，该表单能够传达重要的信息，但不能包含太多的信息，并且暗示了系统的边界。
The elements of form can be represented as a hierarchic decomposition a set of objects that represent the first- and potentially second-level abstractions of the decomposed system, which can be represented in either a graphical or a list format.
表单元素可以表示为一个层次分解——一组对象，它们表示被分解系统的第一层和可能的第二层抽象，可以用图形或列表格式表示。
4.4 Analysis of Formal Relationships in Architecture Formal Relationships In this section, we will focus on the relationships of form, which are sometimes called formal relationships or (more commonly) structure.
在本节中，我们将重点关注形式的关系，有时称为形式关系或(更常见的)结构。
Question 4c in Table 4.1 suggests that this is the next task in analysis.
表4.1中的问题4c表明这是下一个分析任务。
As defined in Box 4.4, structure is the set of formal relationships among the elements of form of a system.
正如方框4.4所定义的，结构是系统的形式要素之间的形式关系的集合。
Structure is not conveyed by Figure 4.9!
图4.9没有传达结构!
Structure is additional information.
结构是附加信息。
If you are merely given a random set of mechanical parts or lines of code (the set of objects of form of the system), you do not know how to assemble them.
如果只是给你一组随机的机械部件或代码行(系统形式的对象的集合)，你不知道如何将它们组合起来。
What is missing is information about the structure.
缺少的是关于结构的信息。
Structure shows where the elements of form are located and how they are connected.  
结构显示了形式元素的位置和它们是如何连接的。
After elements of form, formal relationships are the next most tangible aspects of a system.
在形式元素之后，正式关系是系统的下一个最有形的方面。
Structure is often instrumental in functional interactions.
结构在功能的相互作用中经常起作用。
If there are functional relationships among the elements of form, in most cases there must also be a carrier of these functional interactions.
如果形式要素之间存在功能关系，那么在大多数情况下，也必须有一个载体来承载这些功能的相互作用。
Formal relationships often carry the functional interactions.
正式的关系往往承载着功能上的相互作用。
If A supplies power to B (a functional interaction), there may be a connecting wire (the structure).
如果A给B供电(功能交互)，可能会有连接线(结构)。
If A provides an array to B (a functional interaction), there may be a link or shared address space (the structure).
如果A向B提供一个数组(函数交互)，则可能存在一个链接或共享地址空间(结构)。
Since functional interactions are crucial to emergence, and since functional interaction is often enabled by formal structure, understanding structure is essential to understanding the system.
由于功能交互对于出现是至关重要的，而且功能交互通常是通过正式的结构实现的，因此理解结构对于理解系统是至关重要的。
Structure is the set of relationships that exist and do not require change, exchange, or anything that happens along a timeline.
结构是一组存在的关系，它们不需要更改、交换或在时间轴上发生的任何事情。
At any instant of time, they just are.Like all of form, formal
在任何时刻，它们都是。就像所有形式一样，正式
relationships are about what exists, not what occurs.
关系是存在的，而不是发生的。
In our pump, the motor is connected to the housing a connection that simply exists.
在我们的泵，电动机是连接到住房的一个简单的连接。
Formal relationships can be changed.
正式的关系是可以改变的。
Elements can be connected, unconnected, or moved.
元素可以连接、不连接或移动。
Formal relationships often implicitly represent things that have happened in the past.
正式的关系通常隐含着过去发生过的事情。
The relationship A is next to B implies that at some time in the past, A was placed next to B. The relationship A is connected to B implies that at some earlier time, there occurred a joining process in which A was connected to B. The two main types of structural relationships are spatial/topological relationships and connections.
A是B旁边的关系意味着在过去一段时间,一个被B A与B的关系意味着,一些早期的时候,发生一个加入的过程中有一个连接到B结构关系的两种主要类型的空间/拓扑关系和联系。
In a circuit design, for example, the designer produces the layout drawing (Figure 4.10) that shows where components are located the spatial/topological view.
例如，在电路设计中，设计者会生成布局图(图4.10)，显示组件在空间/拓扑视图中的位置。
The designer also produces the circuit diagram (Figure 4.11) that shows how components are connected.
设计人员还生成显示组件如何连接的电路图(图4.11)。
Both are needed;
两者都是需要的;
from Figure 4.10 alone it is not possible to figure out what is connected, and from Figure 4.11 alone it is not possible to determine where things are located.
单独从图4.10是不可能知道连接的是什么，单独从图4.11是不可能确定事物的位置。
As will be discussed, there are also other types of structural relationships that are sometimes important to a system.
正如将要讨论的，还有其他类型的结构关系，它们有时对系统很重要。
Spatial/Topological Formal Relationships Spatial/topological relationships explain where things are: the location or placement of the objects of form.
空间/拓扑形式关系空间/拓扑关系解释事物的位置:形式对象的位置或位置。
These relationships imply only location and placement, not the ability to transmit anything between the objects.
这些关系只意味着位置和位置，而不是物体之间传递任何东西的能力。
In physical systems, spatial and topological relationships are largely issues of geometry, but in information systems, one must also consider the more abstract issues of space and topology, as we shall see in Section 4.6.
在物理系统中，空间和拓扑关系主要是几何问题，但在信息系统中，我们还必须考虑更抽象的空间和拓扑问题，我们将在4.6节中看到。
Spatial relationships capture absolute or relative location or orientation.
空间关系捕捉绝对或相对的位置或方向。
Above and below, ahead and behind, left and right, aligned and concentric, near to and far from all of these relationships convey relative location.
上面和下面，前面和后面，左边和右边，对齐和同心圆，靠近和远离所有这些关系传达了相对的位置。
Absolute location may be given with some reference, such as an Earth geodesic reference or a local reference system.
给出绝对位置时可以参考一些参考，如地球测地线参考或局部参考系统。
Topology is about placement and suggests relationships such as within, contained in, surrounded by, overlapping, adjacent, touching, outside of, or encircling.
拓扑是关于放置和建议关系，如内部、包含在、被包围、重叠、邻近、接触、外部或包围。
In practice, the differences between spatial and topological relationships are very subtle, and both can be considered part of one set of spatial/topological relationships.
在实践中，空间关系和拓扑关系之间的差异非常微妙，两者都可以被认为是一组空间/拓扑关系的一部分。
Spatial/topological relationships are often very important.
空间/拓扑关系通常非常重要。
For example, it may be important to know that the lungs are not only connected to the heart but also near it.
例如，了解肺部不仅与心脏相连，而且离心脏很近，这一点可能很重要。
At compilation, it is important to know where a certain code is located.
在编译时，了解特定代码的位置是很重要的。
In a factory, it may be important to know the relative locations of two workstations that exchange parts.
在工厂中，了解交换部件的两个工作站的相对位置可能很重要。
Optical elements have to be aligned to work properly.
光学元件必须对准才能正常工作。
The procedure for identifying the spatial/topological relationships (Question 4c of Table 4.1) is to examine each pairwise set of objects of form and ask, Is there an important spatial/topological relationship between these two objects?
确定空间/拓扑关系(表4.1的问题4c)的过程是检查每一组成对的形式的对象，并问，这两个对象之间是否有重要的空间/拓扑关系?
Thinking holistically, we recognize that there is a spatial relationship between every pair of objects.
从整体上来看，我们认识到每一对物体之间都存在着空间关系。
We must apply focus, and because we are trying to use structure to eventually understand functional interaction and emergence, the key question is the following: Is this spatial or topological relationship key to some important functional interaction or to the successful emergence of function and performance
我们必须应用焦点，因为我们试图使用结构来最终理解功能交互和出现，关键问题如下:这种空间或拓扑关系是某些重要的功能交互的关键还是功能和表现的成功出现的关键
Figure 4.10 spatial/topological representation of a circuit: location of components.
图4.10电路的空间/拓扑表示:元件的位置。
(source: Vectorass/fotolia) A typical mechanical engineering representation of spatial/topological information for an assembled system is shown in Figure 4.12 for the pump.
(来源:Vectorass/fotolia)泵的空间/拓扑信息的典型机械工程表示如图4.12所示。
From this three-view drawing, we can see approximately where elements are located, what touches what, and so on.
从这个三视图中，我们可以大致看到元素的位置，什么接触了什么，等等。
A more illustrative drawing is called the expanded view, an example
一个更具说明性的图称为展开视图
Figure 4.12 spatial/topological representation of a pump: Where components are located.
图4.12泵的空间/拓扑表示:部件的位置。
of which is shown in Figure 4.5.
其中如图4.5所示。
From this and several other types of drawings (such as section views), all of the important spatial/topological information can be extracted.
从这张图和其他几种类型的图(比如剖面图)中，可以提取所有重要的空间/拓扑信息。
Figure 4.11 shows a typical spatial/topological view of a circuit.
图4.11显示了电路的典型空间/拓扑视图。
Representing Formal Relationships with Graphs and Diagrams;
用图形和图表表示形式关系;
OPM We seek a generalized way to represent structural information for an architecture.
OPM我们寻求一种广义的方法来表示一个架构的结构信息。
As was suggested in Chapter 2, there are essentially two choices: We can represent structure with graphs and diagrams or with tables and matrix-like views.
正如在第2章中所建议的，基本上有两种选择:我们可以用图形和图表来表示结构，或者用表和类似矩阵的视图来表示结构。
Since both have their advantages and disadvantages, we will develop both approaches.
由于这两种方法都有其优点和缺点，我们将开发这两种方法。
Graph representations generally represent the objects of form, with structure indicated by various types of lines and arrows connecting the objects.
图表示通常表示具有形式的对象，其结构由连接对象的各种类型的线和箭头表示。
In some notational schemes, the arrows are semantic and express meaning.
在一些符号格式中，箭头表示语义和意义。
In others they are more informal.
在另一些国家，他们更不正式。
In this text, we will consistently use the OPM graphical representation of structure shown in Figure 4.13, which is a binary link generally shown as a single-headed arrow that runs from one object to another, with an accompanying label.
在本文中，我们将始终使用图4.13所示的结构的OPM图形表示，它是一个二进制链接，通常显示为一个单头箭头，从一个对象运行到另一个对象，并附带一个标签。
There is a forward version of the link see the link from object A to B with a label that describes the nature of the relationship in simple language.
链接有一个转发版本，参见从对象a到B的链接，带有一个标签，用简单的语言描述了关系的性质。
For example, examining Figure 4.5, we see that the housing surrounds the impeller but does not touch it.
例如，检查图4.5，我们可以看到壳体围绕在叶轮周围，但并不接触叶轮。
In Figure 4.13, this is shown by an arrow from housing to impeller with the label Surrounds so that one reads, the housing surrounds the impeller.
在图4.13中，从外壳到叶轮用一个箭头表示，标签被包围着，这样就可以看到外壳包围着叶轮。
The direction of the arrow from A to B is arbitrary and does not imply any exchange, interaction, or causality.
从A到B的箭头方向是任意的，并不意味着任何交换、相互作用或因果关系。
It is simply a relationship that exists.
它只是一种存在的关系。
Therefore, we could just as accurately have drawn the reverse, or backwards, link from B to A and labeled it Is within so that one would read the impeller is within the housing.
因此，我们可以精确地画出反向的，或反向的，从B连接到A，并标记它在内部，这样就可以读出叶轮在外壳内。
Even though different words are used to label the arrow, the relationship has the same meaning.
尽管用不同的词来标注箭头，但关系具有相同的含义。
Generally, we show the arrow in only one direction, and the other is implicit.
通常，我们只在一个方向上显示箭头，而另一个是隐式的。
Sometimes the same words can be used in both directions.
有时同一个词可以用在两个方面。
The cover is aligned with the motor shaft would reverse to the motor shaft is aligned with the cover.
所述阀盖与所述电机轴对齐后，将所述电机轴与所述阀盖对齐。
We are now ready to apply the procedure for identifying and diagramming important spatial/topological relationships of the pump, where we have restricted ourselves to the five important elements from the hierarchy of Table 4.3.
现在，我们准备应用程序来识别和绘制泵的重要空间/拓扑关系图，在这里，我们将自己限制在表4.3的层次结构中的5个重要元素。
To begin, consider the cover object.
首先，考虑覆盖对象。
It touches the housing and is aligned with the motor shaft (they are co-axial).
它接触壳体和对准电机轴(他们是同轴的)。
What may not be obvious is that the cover object must also be close to the impeller;
可能不太明显的是，盖上的物体也必须靠近叶轮;
the pump would not work if there were a large gap between the impeller and the cover.
如果叶轮和泵盖之间有很大的间隙，泵就不能工作。
In Figure 4.14, these relationships are represented by an arrow that runs from the cover to the housing and is labeled Touches ;
在图4.14中，这些关系用一个箭头表示，箭头从盖子到外壳，并标记为“触摸”;
another arrow that runs to impeller and is labeled Is close to ;
另一个箭头，运行到叶轮和被标记是接近;
and a third arrow that runs to the motor shaft and is labeled Is aligned with.
和第三个箭头，该箭头运行到电机轴并被标记为与。
We then proceed to the other elements of form, identifying important relationships between pairs, until Figure 4.14 is complete.
然后我们继续处理表单的其他元素，确定对之间的重要关系，直到完成图4.14。
A similar diagram showing the structure of the pump could be drawn in SysML, in particular using the block definition diagram and the internal block diagram.
在SysML中可以画出水泵结构的类似图，特别是使用块定义图和内部块图。
This is explained in more detail in Box 4.5
在方框4.5中有更详细的解释
Figure 4.14 simplified spatial/topological structure of a centrifugal pump: Graphical oPm
图4.14简化的离心泵空间/拓扑结构:oPm图
Box 4.5 Methods: Representing Form (Elements and Structure) in SysML What we call form (elements and structural relationships) is represented in SysML using blocks for the entities and several of the SysML relationships between the blocks.
我们称为表单(元素和结构关系)的东西在SysML中使用实体的块和块之间的几个SysML关系来表示。
However, the issue is that these same blocks and some of the relationships can sometimes represent function and functional interaction as well.
然而，问题是这些相同的块和一些关系有时也可以表示函数和函数交互。
Therefore, in representing what we call form (elements and structure) in SysML, a subset of the features of SysML are used selectively.
因此，在SysML中表示我们所说的形式(元素和结构)时，会有选择地使用SysML特性的一个子集。
There are several types of relationships in SysML that are used to represent what we call structure (Figure 4.15).
SysML中有几种类型的关系用于表示我们所称的结构(图4.15)。
Aggregation and composition are represented by a solid line with a diamond at the beginning of the line (the pump is composed of the motor, the impeller, and so on).
聚集和组成用一条实线表示，线的开头有菱形(泵由电机、叶轮等组成)。
Specialization/generalization is represented by a solid line with a triangle at the beginning of the line (for example, the centrifugal pump is a specialization of the generalization pump ).
特殊化/一般化由一条实线表示，线的开头有一个三角形(例如，离心泵是一般化泵的一个特殊化)。
General dependencies, represented by dashed lines with an arrow at the end of the line, and association, represented by a line with a label, can both be used to represent what
一般的依赖关系(由线尾有箭头的虚线表示)和关联关系(由带标签的线表示)都可以用来表示什么
we call structural relationships.
我们称之为结构关系。
Care must be taken, because dependencies and associations can also be used to express functional relationships.
必须小心，因为依赖关系和关联也可以用于表示函数关系。
Interface links and item flow are explicitly used to represent functional interactions.
显式地使用接口链接和项流来表示功能交互。
SysML has two diagrams primarily used to represent what we call structure.
SysML有两个图，主要用来表示我们所说的结构。
Block definition diagrams show the main elements of the system and the formal relationships among them, which may be aggregation, composition, association, dependency, or specialization relationships.
块定义图显示了系统的主要元素和它们之间的正式关系，这些关系可能是聚合、组合、关联、依赖或专门化关系。
Blocks can represent elements of the system and attributes of those elements.
块可以表示系统的元素和这些元素的属性。
In block definition diagrams, blocks may also have ports (inputs and outputs of a block) that indicate functional interaction the type of flow that goes through them, and their interfaces.
在块定义图中，块还可能有端口(块的输入和输出)，这些端口指示功能交互，流过它们的流的类型，以及它们的接口。
Internal block diagrams are used to show the internal structure of blocks, focusing in particular on instances of the system.
内部框图用于显示块的内部结构，特别关注系统的实例。
This includes setting block properties (e.g., set the dimensions of the impeller) and describing flow paths (e.g., illustrate how water passes through the pump).
这包括设置块属性(例如，设置叶轮的尺寸)和描述流路(例如，说明水是如何通过泵的)。
Note that the block properties can include what we call attributes of form, whereas the flow paths are part of functional interaction.
请注意，块属性可以包括我们所说的表单属性，而流路径是功能交互的一部分。
Representing Formal Relationships with Table and Matrix-like Views;
用表和类似矩阵的视图表示形式关系;
DSM An alternative representation of structure can be captured with table and matrix-like views, of which the Design Structure Matrix (DSM) is an example (Section 2.5 and Box 4.6).
设计结构矩阵(DSM)是结构的另一种表示形式，可以通过表和类似矩阵的视图来表示，其中设计结构矩阵(DSM)就是一个例子(第2.5节和方框4.6)。
One reads the DSM in Table 4.4 as Object A has relationship Forward 1 with Object B, and Object B has relationship Backwards 1 with Object A.
我们可以将表4.4中的DSM理解为，对象A与对象B的关系为前向1，对象B与对象A的关系为后向1。
DSM is an acronym that generally stands for Design Structure Matrix but sometimes stands for Decision Structure Matrix or Dependency Structure Matrix.
DSM是一个缩写，通常表示设计结构矩阵，但有时也表示决策结构矩阵或依赖结构矩阵。
A DSM is an N-Squared matrix that is used to map the connections between one element of a system and others.
DSM是一个n方矩阵，用于映射系统的一个元素和其他元素之间的连接。
It s called N-Squared because it is constructed with N rows and N columns, where N is the number of elements.
它被称为N方因为它是由N行N列构成的，其中N是元素的数量。
The normal convention, used in this text, is that one reads down the column to the relationship to the row heading, and that things flow from column heading to row heading.
本文中使用的常规惯例是，读取列到行标题的关系，内容从列标题流到行标题。
The types of relationships shown in a DSM can vary.
在DSM中显示的关系类型可以有所不同。
In this chapter we show spatial/ topological and connectivity relationships in DSMs, but elsewhere we use them to represent a variety of types of information.
在本章中，我们将展示DSMs中的空间/拓扑和连接关系，但在其他地方，我们将使用它们来表示各种类型的信息。
Table 4.5 shows the DSM representation for the simplified pump, which contains the same information as Figure 4.14.
表4.5显示了简化泵的DSM表示，其中包含与图4.14相同的信息。
Again, the cover touches the housing, is aligned with the motor shaft
同样，盖子接触外壳，与电机轴对齐
and is close to the impeller.
靠近叶轮。
The forward and backwards relationships are present;
存在向前和向后的关系;
the housing surrounds the impeller, and the impeller is within the housing.
壳体包围叶轮，叶轮位于壳体内。
Just like the directions of the arrows in the OPM diagram of Figure 4.14, the entries in this DSM do not imply direction or causality.
与图4.14的OPM图中的箭头方向一样，本DSM中的条目并不意味着方向或因果关系。
In particular, for structure the forward and backwards relationships must have the same semantic meaning.
特别是，对于结构来说，向前和向后的关系必须具有相同的语义意义。
We will use both OPM and DSM representations.
我们将同时使用OPM和DSM表示。
Each has advantages and disadvantages.
每种都有优点和缺点。
The graphical representation is normally easier to develop and visualize, but as the system gets more complex, the graphical view becomes cluttered.
图形表示通常更容易开发和可视化，但当系统变得更复杂时，图形视图就会变得混乱。
The matrix representation allows more information to be captured without clutter and can be operated on in computation, but it is harder to visualize.
矩阵表示允许在没有混乱的情况下捕获更多的信息，并且可以在计算中操作，但是它很难可视化。
Connectivity Formal Relationships A second type of formal relationship captures the idea of connectivity and answers the question What is connected, linked, or joined to what?
连接性正式关系第二种类型的正式关系抓住了连接性的概念，并回答了什么是连接的、连接的或与什么连接的问题?
In network systems such as trusses, circuits, and chemical processing plants, connectivity is the most important formal relationships to understand, because it explicitly creates the ability to transfer or exchange something between the connected objects of form.
在桁架、电路和化学处理工厂等网络系统中，连通性是需要理解的最重要的形式关系，因为它明确地创造了在连接的形式物体之间转移或交换某种东西的能力。
Connectivity relationships are often instruments of functional interaction, so they directly support the emergence of function and performance, as is examined in Chapter 6.
连接关系通常是功能交互的工具，因此它们直接支持功能和性能的出现，如第6章所述。
Connectivity and special/topological relationships are quite different in principle.
连接性和特殊/拓扑关系在原则上是完全不同的。
Two elements can be adjacent but not connected (two houses in a neighborhood), and two elements can have unspecified location but be connected (a computer and a server).
两个元素可以是相邻的但没有连接(一个社区中的两个房子)，两个元素可以有未指定的位置但被连接(一台计算机和一台服务器)。
In practice, the difference between spatial/topological structure and connectivity structure is usually evident if the
在实际应用中，空间拓扑结构与连接结构之间的差异通常是明显的
connectivity refers to electrical, chemical, thermal, or biological connections.
连通性指的是电的、化学的、热的或生物的连接。
In mechanical systems, because things must be adjacent to be connected, the spatial/topological structure and connectivity structure tend to be less distinct.
在机械系统中，由于事物必须是相邻连接的，空间/拓扑结构和连通性结构往往不太明显。
Connectivity relationships actually encode information about how the objects were implemented: assembled, manufactured, coded, or written.
连接关系实际上编码了关于如何实现对象的信息:组装、制造、编码或编写。
If two things are connected now, there was a process of connecting them in the past.
如果两件事现在联系在一起，那么在过去就有一个将它们联系起来的过程。
But the connection currently exists, and therefore it is a relationship of form.
但这种联系是存在的，因此它是一种形式的关系。
In software systems, compilation of one object with another is a type of connection due to implementation structure.
在软件系统中，由于实现结构的关系，一个对象与另一个对象的编译是一种连接类型。
Generally in software, connectivity is more subtle.
通常在软件中，连通性更加微妙。
If data or commands are passed, there must exist somewhere a connection point to pass them.
如果要传递数据或命令，必须在某处存在一个连接点来传递它们。
These connections are commonly more transient and hidden deep within the compiled version of code and the operating system, which assigns common addresses (sometimes called pointers) to information that is shared.
这些连接通常是暂时的，隐藏在编译版本的代码和操作系统中，操作系统为共享的信息分配公共地址(有时称为指针)。
In object-oriented programming, two objects may contain a reference to a common third object, defining a structural relationship.
在面向对象编程中，两个对象可能包含对公共第三个对象的引用，该对象定义了一个结构关系。
Structure in software systems is discussed in more depth in Section 4.5.
软件系统的结构将在4.5节中更深入地讨论。
There are a few classes of functional interactions that do not require an explicit formal connection.
有一些类的功能交互不需要显式的正式连接。
The most common of these is interaction through electrical forces and the electromagnetic spectrum, which includes visible and radio frequencies, as well as heat transfer through black body radiation.
其中最常见的是通过电力和电磁波谱的相互作用，包括可见光和无线电频率，以及通过黑体辐射的热传递。
Of course, gravitational interactions also do not require an explicit connection.
当然，引力相互作用也不需要明确的联系。
There is a class of interactions associated with the ballistic flow of particles and continua, such as a fluid jet or a thrown baseball.
有一类相互作用与粒子和连续物的弹道流有关，如流体射流或投掷的棒球。
Here mass, momentum, and energy are exchanged without any explicit interconnect other than space.
在这里，质量、动量和能量的交换除了空间之外没有任何显式的联系。
The procedure used to answer Question 4c of Table 4.1 and to determine connectivity relationships is similar to that used to identify spatial/topological relationships.
用于回答表4.1中的问题4c和确定连接关系的过程与用于确定空间/拓扑关系的过程相似。
We examine each pairwise set of objects of form, and ask, Is this connectivity relationship key to some important functional interaction or to the successful emergence of function and performance?
我们检查每一组成对的形式对象，并问，这种连接关系是某些重要的功能交互的关键，还是功能和性能的成功出现的关键?
Connectivity is usually more evident and less subject to interpretation than special/topological structure.
连接性通常比特殊/拓扑结构更明显，更不容易解释。
In identifying connections, one has to consider whether the connector itself must be modeled as an element of form or, conversely, can be abstracted away.
在识别连接时，必须考虑连接器本身是否必须被建模为一个表单元素，或者反过来，是否可以被抽象出来。
In the example of the circulatory system in Chapter 2, we successfully thought about the heart, lungs, and capillaries without explicitly mentioning the veins and arteries that connect them.
在第二章循环系统的例子中，我们成功地想到了心脏、肺和毛细血管，而没有明确地提及连接它们的静脉和动脉。
In general, one first attempts to abstract away the connectors, simply to minimize the number of objects that are being considered.
一般来说，首先尝试抽象连接器，只是为了最小化正在考虑的对象的数量。
An exception to this rule is the connector at a system interface.
这个规则的一个例外是系统接口上的连接器。
Such interfaces are sufficiently important to the system, and such a common source of problems, that modeling the interface as a separate object is often appropriate, as is discussed in Chapter 6.
这些接口对系统非常重要，而且是问题的常见来源，因此将接口建模为一个单独的对象通常是合适的，如第6章所讨论的。
A typical mechanical engineering representation of connectivity is the expanded view of the pump in Figure 4.5.
连接性的典型机械工程表示是图4.5中泵的展开视图。
The connectivity structure for the simplified pump is shown in Figure 4.16.
简化后的泵连通性结构如图4.16所示。
Now the cover presses against the housing, which is a kind of mechanical connection.
现在盖子压在外壳上，这是一种机械连接。
The devices that cause the pressing are the screws, which have been abstracted out of this simplified model.
造成挤压的装置是螺钉，它已经从这个简化模型中抽象出来。
The impeller has a similar kind of press fit, due to its being slid onto a shaft.
叶轮有类似的压配合，因为它被滑到轴上。
The relationship between the motor shaft and the motor is quite complex;
电机轴与电机的关系比较复杂;
the shaft is contained within the motor and is supported on bearings that allow rotation.
轴包含在电机中，支承在允许旋转的轴承上。
Here it makes most sense to label the connectivity relationship with the type of the connector: bearings.
这里最有意义的是用连接器的类型标记连接关系:轴承。
Comparison of Figure 4.16 with Figure 4.14 shows fewer connections than spatial/topologic relationships.
对比图4.16和图4.14，可以发现连接比空间/拓扑关系少。
The spatial/topological relationships in Figure 4.14 that are associated with touching reappear in Figure 4.16 as a connectivity relationship.
图4.14中与触摸相关的空间/拓扑关系在图4.16中以连通关系的形式重新出现。
However, those associated with pure topology (such as alignment, within, and encircles) are not reflected in Figure 4.16.
但是，那些与纯拓扑(如对齐、内部和包围)相关的内容没有反映在图4.16中。
In mechanical systems, the distinction between the spatial relationship touching and the connectivity pressing is subtle.
在机械系统中，空间关系的接触和连通性的压制之间的区别是微妙的。
One implies only location, and the other also conveys the ability to transmit load.
一个只表示位置，另一个也表示传输负载的能力。
If we had chosen a mechanical example in which the two objects were glued together, then the difference between touching (spatial) and glued (connectivity) would be more evident.
如果我们选择一个两个物体粘在一起的力学例子，那么接触(空间)和粘在一起(连通性)之间的区别就会更明显。
The DSM representation of the connectivity structure of the simplified pump is shown in Table 4.6.
简化泵连通性结构的DSM表示如表4.6所示。
Once again, it contains the same information as the graphical representation in Figure 4.16.
同样，它包含与图4.16中的图形表示相同的信息。
There is no implication that anything is exchanged;
没有任何交换的暗示;
these connections just exist.
这些联系是存在的。
Therefore, the matrix is symmetric, except for the phrases Slid onto and Had slid onto,   which are necessary so that the DSM will make sense when read from the column heading to the row heading: The impeller slid onto the shaft, whereas The shaft had slid onto the impeller.
因此，矩阵是对称的，除了短语“滑上”和“已经滑上”，这是必要的，使DSM将有意义时，从列标题读到行标题:叶轮滑到轴，而轴滑到叶轮。
As a practical matter, the spatial/topological and connectivity relationships are often combined into one representation of structure.
作为一个实际问题，空间/拓扑关系和连接关系经常被组合成一个结构的表示。
Table 4.7 shows a summary of the structure of the
表4.7显示了控件的结构摘要
system, where the details have been abstracted to just the existence of a spatial (S) or a connectivity relationship (C) among the elements.
在系统中，细节被抽象为元素之间存在空间上的(S)或连接关系(C)。
Other Formal Relationships In addition to spatial/topological relationships and connectivity, there are other types of formal relationships that simply exist.
除了空间/拓扑关系和连通性，还有其他类型的形式关系存在。
The procedure for identifying these is the same: Examine pairwise sets of objects, and determine whether there is a relationship of these types that has an important role in enabling functional interaction and emergence.
识别它们的过程是相同的:检查成对的对象集，并确定这些类型之间是否存在一种关系，这种关系在实现功能性交互和出现方面起着重要作用。
aDDreSS The address of something is where it can be found.
aDDreSS某物的地址是可以找到它的地方。
It is an encoded form of the spatial location, but it is common enough to be considered a separate type of formal relationship, because address can also be virtual.
它是空间位置的编码形式，但它足够常见，可以被视为一种单独的正式关系类型，因为地址也可以是虚拟的。
In software, in particular, one makes extensive use of the address of registers and the like.
特别是在软件中，人们广泛使用寄存器等的地址。
A shared address is a connection through which data can be exchanged.
共享地址是一个可以交换数据的连接。
SeQuenCe The static sequence of entities is a type of formal relationship.
实体的静态序列是一种形式关系。
If we know that A is always after B, then this establishes a formal relationship.
如果我们知道A总是在B之后，那么这就建立了一个正式的关系。
For example, in imperative software languages, the writing of a statement 2 after statement 1 implies that 2 is executed after 1;
例如，在命令式软件语言中，在语句1之后编写语句2意味着在1之后执行2;
this is not necessarily true in declarative languages.
这在声明性语言中不一定是真的。
This is a functional statement.
这是一个函数语句。
However, the fact that 2 follows 1 in the coding is true in both cases, which is a formal statement.
然而，编码中2在1之后的事实在这两种情况下都是正确的，这是一个正式的陈述。
MeMberSHiP Being a member of some group or class can be considered a type of formal relationship: A is a member of group 1.
成为某个团体或班级的一员可以被认为是一种正式关系:a是第一组的成员。
Membership is an abstraction that signifies being in a group.
成员关系是一种抽象，表示属于一个组。
It may lead to interaction and responsibility in a group, but it may not.
它可能会导致团队的互动和责任，但也可能不会。
OwnerSHiP If you own something, it is yours.
如果你拥有某物，它就是你的。
Like membership, ownership is an abstraction both useful and common.
与成员关系一样，所有权是一种既有用又常见的抽象。
What really separates my land from your land, or my money from your money?
我的地与你的地有什么分别呢?我的钱与你的钱有什么分别呢?
Only that it was sometime in the past purchased by me or granted to me.
只知道它是在过去的某个时候被我买下来的，或者被授予给我的。
But once I own it, ownership is a static formal relationship between the owner and the owned item.
但是一旦我拥有了它，所有权就是所有者和被拥有物品之间的一种静态的正式关系。
HuMan relaTiOnSHiPS Another type of relationship exists among humans: the bonds between people and the attitudes they hold toward one another.
人与人之间存在着另一种关系:人与人之间的联系以及他们对彼此的态度。
Knowledge of another person s abilities, trust in another person, and liking of her or him these are bonds among people.
了解另一个人的能力，信任另一个人，喜欢她或他，这些是人与人之间的纽带。
Somewhat uniquely, human relationships are not necessarily reciprocal.
从某种意义上说，人类的关系并不一定是互惠的。
For example, you may trust a political figure who has no explicit knowledge of you at all.
例如，你可以信任一个完全不了解你的政治人物。
All formal relationships are static at any given time, but they can change.
所有的正式关系在任何时候都是静态的，但是它们可以改变。
Spatial location can be changed by moving things.
空间位置可以通过移动物体来改变。
Connection can be made and broken, as when a lamp is plugged into an outlet.
可以建立连接，也可以断开连接，就像把灯插入插座一样。
Addresses can be changed by reassignment.
地址可以通过重新分配来改变。
Sequence can be changed by reordering.
序列可以通过重新排序来改变。
Membership in a club exists, but the members can quit.
俱乐部的会员资格是存在的，但会员可以退出。
Ownership is changed by gift giving or sales.
所有权会因送礼或销售而改变。
And the most fickle of all formal relationships are human bonds, which can deteriorate in a second.
在所有正式的关系中，最易变的是人与人之间的关系，这种关系可能会在瞬间恶化。
In summary: Form consists of objects and structure the elements of form and their formal relationship.
综上所述:形式由对象和结构构成，形式的要素及其形式关系。
Both are present in a system, and both must be considered in analysis.
两者都存在于一个系统中，在分析时都必须加以考虑。
There are three broad types of formal relationships: Connection (relationships that create the formal connection over which functional interaction can take place) Location and placement (including spatial/topological relations, address, and sequence) Intangible (membership, ownership, human relationship, and so on) Formal relationships inform and influence the nature of the functional interaction and the emergence of function and performance.
有三大类型的正式关系:联系(关系创建的正式连接功能相互作用可以发生)位置和位置(包括空间/拓扑关系、地址和序列)无形(会员,所有权、人际关系、等等)正式通知的关系和影响力的本质功能交互和功能和性能的出现。
Formal relationships are static in that they exist (although they can be changed).
正式关系是静态的，因为它们存在(尽管它们可以改变)。

 4.5 Formal Context 

The Accompanying Systems Whole Product System, and System Boundary Another way to analyze and understand systems is by taking increasingly broader or more holistic views of the system and its context.
4.5形式环境伴随的系统、整个产品系统和系统边界分析和理解系统的另一种方法是对系统及其环境采取越来越广泛或更全面的观点。
This is an application of the Principle of Holism (see Box 2.5).
这是整体论原理的应用(见方框2.5)。
We will see that it is useful to take two increasingly holistic views of a system, which we will call the whole product system and the use context.
我们将看到，对一个系统采取两种日益全面的观点是有用的，我们将称之为整个产品系统和使用上下文。
Expanding outward from the product/system, the first level of context we encounter includes the other objects that are not part of the product/system but are essential for the system to deliver value.
从产品/系统向外扩展，我们遇到的第一级上下文包括其他对象，它们不是产品/系统的一部分，但对于系统交付价值来说是必不可少的。
We call these the accompanying systems.
我们称之为伴随系统。
The sum of the product/system and the accompanying systems is called the whole product system.
产品/系统和伴随系统的总和称为整个产品系统。
The product/system is separated from the accompanying systems by the system boundary (Section 2.4).
产品/系统与伴随系统之间以系统边界分开(第2.4节)。
What are the accompanying systems and therefore the whole product/system (Question 4d of Table 4.1)?
伴随的系统是什么，因此是整个产品/系统(表4.1的问题4d)?
It is vital for the architect to understand and model the accompanying systems, because they may play an important role in emergence.
对于架构师来说，理解并建模伴随的系统是至关重要的，因为它们可能在出现中扮演重要的角色。
They must be present, connected, and working for the product/system to deliver value.
他们必须在场，相互联系，并为产品/系统工作以交付价值。
There must be well-defined interfaces to these systems at the system boundary, whose existence is described by the answer to Question 4e.
在系统边界上，这些系统必须有明确定义的接口，其存在性由问题4e的答案描述。
The procedure for addressing Questions 4d and 4e of Table 4.1 is to look holistically at the objects of form that are near the system or are connected to it and ask, Are these essential to the delivery of product/system value?
解决表4.1中问题4d和4e的过程是整体地审视系统附近或与系统相连的形式对象，并问，这些对产品/系统价值的交付是否至关重要?
If so, then the abstractions of form are created for the elements of the accompanying systems, and the formal structure between the system and the accompanying systems is identified.
如果是这样，那么将为伴随系统的元素创建形式的抽象，并确定系统和伴随系统之间的正式结构。
Applying this procedure to the pump in Figure 4.5, we can reason that at a minimum, there must be elements that transport fluid to and away from the pump: the inflow and outflow hoses.
将这一程序应用到图4.5中的泵上，我们可以推断，至少必须有将流体输送到泵内外的元件:流入和流出软管。
The entire assembly must be structurally supported by a pump support, and the motor must be
整个组装必须在结构上由泵支撑，电机必须是
powered and controlled.
驱动和控制。
The pump whole product system, including these four accompanying systems, is shown in Figure 4.17.
泵的整个产品系统，包括这四个伴随系统，如图4.17所示。
Most often there is an operator involved in delivering value, and it is good practice to include the operator in diagrams such as Figure 4.17 to remind the architect of the importance of considering human interactions with the system.
在大多数情况下，有一个操作人员参与交付价值，在图4.17中包括该操作人员是一个很好的实践，以提醒架构师考虑与系统交互的重要性。
The dashed line is the boundary that surrounds the product/system.
虚线是围绕产品/系统的边界。
It is good practice to draw the product/system boundary clearly, to reduce ambiguity and explicitly identify interfaces.
清晰地绘制产品/系统边界是一种很好的做法，以减少不确定性并明确地识别接口。
No structural information is shown in the decomposition view of Figure 4.17.
在图4.17的分解视图中没有显示结构信息。
This is best presented in diagrams like the connectivity structure in Figure 4.18.
这在图4.18中的连接结构中表现得最好。
Now one can clearly see the connection between the principal objects of form of the pump and the accompanying systems, and the interfaces at the system boundary.
现在可以清楚地看到泵的主要形态对象和伴随系统之间的联系，以及系统边界的界面。
The Use Context Expanding one more step outward, we find the next level of context, the use context.
使用上下文向外扩展了一步，我们找到了下一个层次的上下文，使用上下文。
The whole product system fits within this use context, which includes the other objects that are normally present when the whole product system operates but are not necessary for it to deliver value.
整个产品系统适合这个使用上下文，它包括其他对象，这些对象通常在整个产品系统运行时出现，但对交付价值来说不是必需的。
The use context is important because it informs the function of the product/system.
使用上下文很重要，因为它通知产品/系统的功能。
It gives place to the whole product system, and it gives us information on the environment in which the system operates and informs design.
它让位于整个产品系统，它为我们提供系统运行环境的信息，并为设计提供信息。
In analysis, the architect may have to speculate on the use
在分析中，架构师可能不得不对使用进行推测
context, because it is rarely documented in system descriptions.
上下文，因为它很少被记录在系统描述中。
The procedure for answering Question 4f of Table 4.1 is to ask, What elements of context that are not already in the whole product system form our understanding of use and design?
回答表4.1中的问题4f的过程是问，在整个产品系统中还没有形成我们对使用和设计的理解的上下文元素是什么?
Applying this idea to the centrifugal pump, we will have to speculate, because the drawings we have available do not contain any hint about use context.
将这个想法应用到离心泵上，我们将不得不推测，因为我们现有的图纸不包含任何使用上下文的暗示。
We can guess that the pump might be an industrial sump pump for salt water removal or part of a home dishwasher.
我们可以猜测，泵可能是一个工业污水池泵，以去除咸水或部分家庭洗碗机。
The system might have different requirements based on these use contexts.
基于这些使用上下文，系统可能有不同的需求。
The need for a clear understanding of the whole product system, informed by the use context, is driven by the accountability and responsibility of the architect.
架构师的责任和职责驱动了对整个产品系统的清晰理解，并由使用环境提供信息。
Even though the architect is responsible only for the product/system, it is inevitable that the architect will be held accountable for the function of the whole product system. 
即使架构师只对产品/系统负责，也不可避免地要对整个产品系统的功能负责。
If it does not work, the architect will likely be accountable regardless.
如果它不起作用，架构师很可能会对此负责。
Just as it is important for an architect to understand about two levels down in decomposition, it is important for him or her to understand about two levels out in context the whole product system and the use context.
就像架构师理解分解中的两个层次一样，理解整个产品系统和使用环境中的两个层次也很重要。
Imagine that the inflow hose for our pump is supplied by a third party.
假设我们泵的进水软管是由第三方提供的。
If the hose does not connect well to the expensive new pump, it is much more likely that the pump supplier will be held accountable for the bad interface than the hose supplier.
如果软管不能很好地连接到昂贵的新泵上，泵供应商比软管供应商更有可能为不良接口承担责任。
In summary: The whole product system consists of the product/system and the accompanying systems that are necessary to deliver value (Question 4d of Table 4.1).     
总而言之:整个产品系统由产品/系统和伴随系统组成，它们是交付价值所必需的(表4.1的问题4d)。
The system boundary runs between the system and the accompanying systems, and each crossing of the boundary indicates an interface that should be controlled (Question 4e of Table 4.1).
系统边界位于系统与伴随系统之间，边界的每一次跨越都表示一个需要控制的接口(表4.1问题4e)。
The use context includes the objects that are normally present when the whole product  system operates but are not essential for the delivery of value (Question 4f of Table 4.1).
使用上下文包括通常在整个产品系统运行时出现的对象，但这些对象对于价值的交付并不重要(表4.1的问题4f)。
Use context establishes place, informs function, and influences design.
使用上下文来建立场所，告知功能，并影响设计。

4.6 Form in Software Systems

The Software System: Informational Form and Duality In this section, we will review the procedure of analyzing the form of a simple system by looking at a software system, bubblesort.
在本节中，我们将通过研究一个名为bubblesort的软件系统来回顾分析一个简单系统的形式的过程。
Like the pump, this is a far more simple system than the tools of architecture are intended for, but it will bring out some important observations.
与泵一样，这是一个远比架构工具所期望的简单得多的系统，但它将带来一些重要的观察结果。
Figure 4.19 shows pseudocode for the standard bubblesort algorithm that sorts an array from its smallest to its largest entry by successively switching the location of adjacent entries if they are not in ascending order.
图4.19显示了标准bubblesort算法的伪代码，该算法将数组从最小项排序到最大项，如果相邻项不是升序排列，则依次切换它们的位置。
We will analyze the architecture guided by the six questions presented in Table 4.1.
我们将根据表4.1中的六个问题对架构进行分析。
Question 4a is What is the system?
问题4a是系统是什么?
In this case, it is obvious that the system is the pseudocode listed in Figure 4.19.
在本例中，系统显然是图4.19中列出的伪代码。
But what is the object of form that represents this system?
但是代表这个系统的形式对象是什么呢?
This requires us to think about what a software object is.
这要求我们思考软件对象是什么。
Note that this is not the software object found in object-oriented programming, even though they share the same nomenclature.
请注意，这不是在面向对象编程中找到的软件对象，尽管它们共享相同的命名法。
Box 4.1 defined form as the physical or informational embodiment of a system that exists . . .
框4.1定义形式为存在的系统的物理或信息体现。
and is instrumental in the execution of function . . .
并在功能的执行中起到辅助作用…
[and that] exists prior to the
[而且它]先于
execution of function.
执行的函数。
Therefore, in software, the code (or pseudocode) is the form: It exists, it exists prior to the execution of function, and it is instrumental of function.
因此，在软件中，代码(或伪代码)是形式:它存在，它存在于功能执行之前，它是功能的工具。
It is implemented (written).
它是实现的(写出来的)。
When it is operated, this form is interpreted as an instruction that, when executed, leads to function.
当它被操作时，这个表单被解释为一条指令，当执行时，它会产生功能。
The passenger emergency instruction card (Figure 4.2) is a metaphor for software code.
乘客应急指令卡(图4.2)是软件代码的隐喻。
It had a set of objects (pictures, etc.) that exist, that have been implemented, and that, when operated, are interpreted by humans as instructions and lead to function.
它有一组对象(图片等)，这些对象存在，已经实现，当操作时，被人类解释为指令和功能。
There is a subtle difference between defining abstractions of software and information  systems and defining those of a physical system, in that information itself is an abstraction.
在定义软件和信息系统的抽象和定义物理系统的抽象之间有一个微妙的区别，因为信息本身就是一个抽象。
Informational form must always be stored or encoded in some physical form, and the two are a duality.
信息形式必须总是以某种物理形式存储或编码，这两者是一种二元性。
As suggested in Box 4.7 on the Principle of Dualism, informational form must always be represented by physical form.
根据二元论的原则，如框4.7所示，信息的形式必须总是由物理形式来表示。
Poems are in print;
诗歌已经出版;
thoughts are encoded in neural patterns;
思想编码在神经模式中;
DVD movies are optical markings encoded on a surface;
DVD电影是在表面上编码的光学标记;
and images are composed of pixels.
图像是由像素组成的。
In
在
Dualism in philosophy, mind/body, free will/determinism, idealism/materialism appear as contradictory only because of underdeveloped formulation of the concepts involved.   
哲学中的二元论、精神/身体、自由意志/决定论、唯心主义/唯物主义之所以出现矛盾，仅仅是因为概念的表述不够完善。
hegel s dialectic, Science of Logic (1812 1816) All built systems inherently and simultaneously exist in the physical domain and the informational domain.
黑格尔的辩证法、逻辑学(1812 - 1816)内在地、同时地存在于物理领域和信息领域。
It is sometimes useful to explicitly consider both the physical and the informational views of a system.
有时明确地考虑系统的物理视图和信息视图是有用的。
Dualism holds that things can be usefully considered in two domains simultaneously in this case, physical and informational domains.
二元论认为事物可以在物理和信息两个领域同时考虑。
Systems that we usefully think of as information systems are just abstractions of physical objects that store and process the information.
我们通常认为是信息系统的系统只是存储和处理信息的物理对象的抽象。
Systems that we think of as physical store all the information about their form, but not necessarily about their function.
我们认为是物理系统的系统存储了关于其形式的所有信息，但不一定是关于其功能的信息。
all cases, information is encoded in some physical form.
在所有情况下，信息都以某种物理形式编码。
When we speak about information, it is patterns in physical form that can be encoded and decoded by the user.
当我们谈到信息时，它是可以被用户编码和解码的物理形式的模式。
Formal Entities and Relationships in Software Continuing in Table 4.1, Question 4b is What are the principal elements of form?
软件中的正式实体和关系继续在表4.1中，问题4b是什么是形式的主要元素?
Now that we understand that the code is form, the likely elements are obvious: the lines of pseudocode.
既然我们理解了代码是形式，可能的元素就很明显了:伪代码行。
Alternatively, we could abstract together the procedure/end procedure, the if/end if, the for j/end of j loop, and the for i/end of i loop and identify eight important elements.
或者，我们可以将过程/end过程、if/end if、for j/end of j循环和for i/end of i循环抽象在一起，并确定8个重要元素。
Decomposing the lines of code further does not provide additional useful information about the system.
进一步分解代码行不会提供关于系统的其他有用信息。
There are certainly details that are important, such as command semantics, order of variables, and naming conventions.
当然还有一些重要的细节，比如命令语义、变量的顺序和命名约定。
This information is best treated as a detail of an object, much as the details of the impeller of the pump were important to its performance, but not to its architecture.
这些信息最好作为一个对象的细节来处理，就像泵的叶轮的细节对它的性能很重要，但对它的架构不重要一样。
Question 4c of Table 4.2 is What is the formal structure?
表4.2的问题4c是什么是正式结构?
The procedure for determining formal relationships that is recommended in Section 4.3 is to examine each pairwise set of objects and determine whether there is a spatial/topological or a connectivity relationship between them.
第4.3节中推荐的确定形式关系的程序是检查每一组成对的对象，并确定它们之间是否存在空间/拓扑关系或连接关系。
For software, we need to consider the idea of spatial/topological relationships more generally.
对于软件，我们需要更普遍地考虑空间/拓扑关系的概念。
The structure of objects in software code is implicit and is suggested by (optional) indentations, code conventions, and language syntax.
软件代码中对象的结构是隐式的，由(可选的)缩进、代码约定和语言语法建议。
The most important element of spatial/topological structure in imperative languages is sequence what lines of code are executed before what other lines of code.
命令式语言中空间/拓扑结构最重要的元素是顺序:哪些行代码在哪些行代码之前执行。
For example in Figure 4.19 it is apparent that lines 5 7 are in a sequence.
例如在图4.19中，第5行和第7行显然是一个序列。
Also, they are within the conditional if statement, which is within the j loop, and so forth.
同样，它们在条件if语句中，也在j循环中，等等。
Figure 4.20 shows the structural relationships for lines 4 8 explicitly.
图4.20显式地显示了第4行和第8行之间的结构关系。
The precedes or follows sequential spatial/topological relationship informs the transfer of control during execution.
顺序空间/拓扑关系的前面或后面通知执行期间的控制转移。
Likewise, the contains or within relationship informs th
同样，包含或在关系内通知th
execution of all the lines that are contained within the section of code, if the conditional test is met.
如果条件测试满足，则执行代码段中包含的所有行。
In such imperative pseudocode, the spatial/topological structure informs the eventual flow of control, or at least the part that is strictly associated with structure.
在这种命令式伪代码中，空间/拓扑结构通知控制的最终流，或者至少是与结构严格相关的部分。
The DSM tabular view of the spatial/topological structure of the bubblesort code is shown in Table 4.8.
bubblesort代码的空间/拓扑结构的DSM表格视图见表4.8。
The grey section indicates the lines that were shown in Figure 4.20.
灰色部分表示图4.20中所示的线。
This matrix makes explicit what lines are preceded by what other lines of code, as well as lines that are contained within the paired lines such as if/end if.
这个矩阵显示了哪些行前面有哪些代码行，以及包含在配对行(如if/end if)中的行。
The DSM indicates that there are no spatial/topological relationships with the two objects outside of the procedure that is, the compiler and calling routine.
DSM表明，与过程之外的两个对象(即编译器和调用例程)没有空间/拓扑关系。
The connectivity structural relationships for software are associated with the connections that will carry the functional interaction: the exchange of data or variables. 
软件的连接结构关系与将承载功能交互的连接相关联:数据或变量的交换。
As an example, the connectivity DSM for bubblesort is shown in Table 4.9.
例如，bubblesort的连通性DSM如表4.9所示。
Here the entries are used to indicate the variable shared: the array, length of the array, temporary, and the indices for the i and j loops.
这里的条目用于表示共享的变量:数组、数组的长度、临时以及i和j循环的索引。
Comparing Tables 4.8 and 4.9 for the spatial/topological and connectivity structural relationships of the bubblesort procedure, we see less similarity between the two than in the corresponding arrays for the pump in Tables 4.5 and 4.6.
比较表4.8和4.9中bubblesort过程的空间/拓扑和连通性结构关系，我们可以看到，与表4.5和4.6中泵的对应数组相比，两者之间的相似性更少。
In general, it is possible to make spatial/topological and connectivity structure more distinct in information systems than in physical systems.
一般来说，在信息系统中使空间/拓扑结构和连接结构比在物理系统中更加明显是可能的。
Software Whole Product Systems, Boundaries, and Use Context Table 4.1 next suggests Question 4d: What are the accompanying systems?
软件整个产品系统，边界，和使用上下文表4.1接下来建议问题4d:伴随的系统是什么?
and What is the whole product system?
那么整个产品系统是什么呢?
Recall that the whole product system contains the accompanying systems
回想一下，整个产品系统包含相应的系统
that are essential to deliver the product/system value.
对交付产品/系统价值至关重要的。
In the case of the bubblesort, value is delivered as a sorted array.
在bubblesort的情况下，值作为排序后的数组传递。
The additional accompanying systems in the whole product system therefore are at least the calling routine and the compiler that compiles the source code into executable instructions.
因此，整个产品系统中附加的系统至少是调用例程和将源代码编译成可执行指令的编译器。
Following on from there, the accompanying systems would be the processor that executes the instructions, and the input and output devices to enter the arrays.
从那里开始，伴随的系统将是执行指令的处理器，以及进入阵列的输入和输出设备。
Ultimately, there are also the power supply, network, operator, and so forth.
最后，还有电源、网络、运营商等等。
For simplicity, we will limit our discussion of the accompanying systems to the compiler and calling routine, as shown by the objects listed beyond the dashed line (system boundary, Question 4e) in Tables 4.8 and 4.9.
为了简单起见，我们将把附带系统的讨论限制在编译器和调用例程上，如表4.8和4.9中虚线以外列出的对象(系统边界，问题4e)所示。
Examining these tables reveals the interfaces in the off-diagonal blocks.
检查这些表可以发现非对角块中的接口。
Although there are no important spatial/topological interfaces, there are important connectivity interfaces.
虽然没有重要的空间/拓扑界面，但有重要的连通性界面。
There must be a connection that allows the array and array length to be shared between the calling routine and bubblesort.
必须有允许在调用例程和bubblesort之间共享数组和数组长度的连接。
In addition, there must be a connection that enables the compiler to view the code and create the appropriate machine-level instructions.
此外，必须有一个连接，使编译器能够查看代码并创建适当的机器级指令。
Finally, Question 4f of Table 4.1 is What is the use context?
最后，表4.1的问题4f是使用上下文是什么?
From the information we have, this would be difficult to say.
根据我们所掌握的资料，这很难说。
It could be an instructional module for students, a library application, or a piece of embedded system-critical software.
它可以是学生的教学模块、图书馆应用程序或嵌入式系统关键软件的一部分。
The requirements for quality assurance, reliability, and maintainability would be different in these cases.
在这些情况下，对质量保证、可靠性和可维护性的需求会有所不同。
In summary: The objects of form for a software system are the code, which (when operated) will be interpreted as instructions.
总而言之:软件系统的形式对象是代码，它(在运行时)将被解释为指令。
The software form can be decomposed into modules, procedures, and eventually (if desired) lines of code.
软件形式可以分解为模块、过程和(如果需要的话)代码行。
The structure of software consists of spatial/topological structural relationships that inform control flow during execution, and connectivity structure, which is the instrumental connection that allows data and variable flow during execution.
软件的结构包括在执行过程中告知控制流的空间/拓扑结构关系和连接结构，连接结构是在执行过程中允许数据和可变流的工具连接。
The whole product system for software includes the software code, the accompanying system (compiler, calling routine, processor, system software, input and output, and so on) and the use context systems that inform requirements and operations.
软件的整个产品系统包括软件代码、伴随系统(编译器、调用例程、处理器、系统软件、输入和输出等等)和通知需求和操作的使用上下文系统。
4.7 Summary Form is a system attribute that is the physical/informational embodiment of a system that exists or has the potential to exist and is instrumental of function.
4.7摘要形式是系统属性，是已存在或有可能存在的系统的物理/信息体现，是功能的工具。
Form can be decomposed into objects of form, and those objects have formal relationships or structure.
形式可以分解为形式对象，这些对象具有形式关系或结构。
Form is eventually implemented and operated.
表单最终实现和操作。
The form of the system combines with other accompanying systems (with which it interfaces at its boundary) to create the whole product system that generates value.
系统的形式与其他伴随系统相结合(在其边界与之相连)，从而创造出产生价值的整个产品系统。
A complete description of form includes the formal objects of the system, their structure, the accompanying systems, the interfaces, and the use context.
表单的完整描述包括系统的形式化对象、它们的结构、伴随的系统、接口和使用上下文。
In this chapter, we took the approach of reverse engineering.
在本章中，我们采用了逆向工程的方法。
We started the analysis with the more concrete system attribute of form and deferred the less concrete system attribute of function to the next chapter.
我们从较为具体的形式系统属性开始分析，将较为具体的功能系统属性推迟到下一章。
In Table 4.1, we defined six questions to guide the analysis of form, along with procedures that might be useful in addressing the questions.
在表4.1中，我们定义了六个问题来指导对表单的分析，以及可能有助于解决这些问题的步骤。
We applied these procedures to two simple systems, a mechanical pump and bubblesort, and found that they were helpful in guiding the analysis of these systems.
我们将这些方法应用于机械泵和气泡泵这两个简单的系统，发现它们有助于指导这些系统的分析。

       第五章 

5.1 Introduction The analysis of function and form are interwoven.
功能和形式的分析是交织在一起的。
This chapter is the complement of Chapter 4 and establishes the groundwork for the analysis of function.
本章是第四章的补充，为功能分析奠定了基础。
When employing zigzagging (Section 3.5), the architect works in one domain for a period and then switches to the other.
当采用之字形(章节3.5)时，架构师在一个领域工作一段时间，然后切换到另一个领域。
Therefore, discussing form first does not imply any strict sequence in analysis, but rather is a topical organization of material.
因此，先讨论形式并不意味着在分析中有任何严格的顺序，而是材料的局部组织。
Function is less tangible than form, so we begin by defining and describing function in Section 5.2.
函数不如形式有形，因此我们首先在5.2节中定义和描述函数。
In Section 5.3, we discuss the externally delivered function that is linked to the primary purpose of the system.
在第5.3节中，我们将讨论与系统的主要目的相关联的外部交付的功能。
This external function emerges from internal functions, as described in Section 5.4.
如5.4节所述，这种外部功能是从内部功能中产生的。
The internal operands create functional interaction and yield the functional architecture (Section 5.5).
内部操作数创建功能交互并生成功能架构(章节5.5)。
A system often delivers secondary externally delivered functions as well, and these are discussed in Section 5.6.
一个系统通常也提供二级外部提供的功能，这些将在第5.6节中讨论。
A short discussion of representing function in SysML concludes the chapter.
最后对SysML中的函数表示进行了简短的讨论。
In this analysis of function, we will again be guided by a set of questions, given in Table 5.1.
在这个函数分析中，我们将再次以一组问题为指导，如表5.1所示。
5.2 Function in Architecture Function Function is what a system does.
功能是一个系统所做的事情。
Function is about activity, in contrast with form, which is about existence.
功能是关于活动的，而形式是关于存在的。
As indicated by Box 5.1, function involves operations, transformations, or actions.
如框5.1所示，函数涉及操作、转换或操作。
Performance (how well a system performs) is an attribute of function.
性能(系统执行的好坏)是功能的一个属性。
Function is the activity, operation, or transformation that causes or contributes to performance.
功能是导致或促成性能的活动、操作或转换。
In designed systems, function is the actions for which a system exists, which ultimately lead to the delivery of value.
在设计的系统中，功能是系统存在的行为，最终导致价值的交付。
Function is executed by form, which is instrumental in function.
功能由形式执行，形式是功能的工具。
Function emerges from functional interaction between entities.
功能产生于实体之间的功能交互。
Function is a product/system attribute.
功能是产品/系统的属性。
Just as form has entities of form (objects) and formal relationships among the entities (structure), function has entities of function and functional relationships among the entities (interactions).
正如形式有形式的实体(对象)和实体之间的形式关系(结构)一样，功能也有功能的实体和实体之间的功能关系(交互)。
The function we see on the surface of a system is a result of the emergence that has taken place among these entities of function within the system, and in the whole product system.
我们在系统表面看到的功能，是系统内部，以及整个产品系统中，功能实体出现的结果。
Function is vitally important to systems and system architecture.
功能对于系统和系统架构是至关重要的。
All of the magic of systems and their emergence, and nearly all of the challenge of designing them, is found in the functional domain.
系统的所有魔力及其出现，以及设计它们的几乎所有挑战，都存在于功能领域。
Function is therefore a system attribute.
函数因此是一个系统属性。
All systems have function, but in built systems, function must be conceived so that the goals of the system are achieved.
所有的系统都有功能，但是在构建的系统中，必须考虑功能，以便实现系统的目标。
Because function is less tangible than form, it is expressed in many different ways.
因为功能不如形式有形，所以它有许多不同的表达方式。
In organizations, function is sometimes called tasks, roles, or responsibilities.
在组织中，功能有时被称为任务、角色或责任。
In a typical government constitution, it is called powers.
在一个典型的政府宪法中，它被称为权力。
It lists the functions of various government branches, which are typically divided into legislature, executive, and judiciary branches.
它列出了政府各部门的职能，通常分为立法、行政和司法部门。
Function as Process Plus Operand In Chapter 2, we found that a function is made up of a process and an operand, leading to the rule function = process + operand.
在第2章中，我们发现一个函数是由一个进程和一个操作数组成的，从而得到函数=进程+操作数的规则。
For the house and emergency briefing card examples, we have function = housing + resident and function = instructing + passenger.
对于房屋和紧急情况介绍卡的例子，我们有function = housing + resident和function = instruction + passenger。
In order to better understand function, we first need to better understand operands and processes.
为了更好地理解函数，我们首先需要更好地理解操作数和进程。
Operands Operands are a type of object (Box 4.2).
操作数是对象的一种类型(框4.2)。
Some objects in a system are elements of form, and some are operands.
系统中的一些对象是形式元素，一些是操作数。
In human language, all objects are usually named by nouns.
在人类语言中，所有物体通常都用名词来命名。
All objects, including operand objects and objects of form, have the potential for stable unconditional existence for some period of time.
所有对象，包括操作数对象和形式对象，都有可能在一段时间内稳定无条件地存在。
However, form is a type of object that must exist before the function, is instrumental in the function, and is designed by the architect and supplied with the system.
然而，形式是一种必须先于功能存在的对象，是功能的工具，由架构师设计并随系统提供。
On the other hand, an operand is the part of function that represents what is changed by the function the resident is housed or the passenger is instructed.
另一方面，操作数是函数的一部分，它表示居民居住的函数或乘客被指示的函数所改变的内容。
The more formal definition of the term operand is given in Box 5.2.
术语操作数的更正式的定义在框5.2中给出。
We see that operands are acted upon by the process part of the function.
我们看到操作数被函数的进程部分所作用。
Operands may exist before the function is executed, or they may appear as the function is executed.
操作数可以在函数执行之前存在，也可以在函数执行时出现。
In general, they will be created, transformed, or consumed by the process.
通常，它们将由流程创建、转换或使用。
An operand is an object and therefore has the potential for stable, unconditional existence for some period of time.
操作数是一种对象，因此有可能在一段时间内稳定、无条件地存在。
Operands are objects that need not exist prior to the execution of function and are in some way acted upon by the function.
操作数是在函数执行之前不需要存在的对象，它们以某种方式受到函数的作用。
Operands may be created, modified, or consumed by the process part of function.
操作数可以由函数的进程部分创建、修改或使用。
Box 5.2 Definition: Operand Interestingly, the operands are not usually supplied by the architect or builder of the system.
有趣的是，操作数通常不是由系统的架构师或构建者提供的。
Instead, they appear at the time of operation, usually from other sources.
相反，它们通常在操作时从其他来源出现。
The resident is not supplied with the house, nor is the passenger supplied with the instruction card.
住户没有得到房子，乘客也没有得到指示卡。
Often, as architects, we do not have much control over the operand.
通常，作为架构师，我们对操作数没有太多的控制。
The residents may have unique tastes in buildings, and the passenger may not speak any of the languages used on the instruction card.
居民可以对建筑物有独特的品味，乘客不得说任何一种使用说明卡上的语言。
The operand is almost never shown on a conventional representation of a system.
在系统的常规表示中，几乎从不显示操作数。
prOcesses In human language, processes are associated with verbs, which are the aspect of our human language that captures actions or transformations.
在人类语言中，过程与动词有关，动词是人类语言中捕获动作或转换的方面。
A process is defined in OPM as a pattern of transformation applied to one or more objects (Box 5.3).
流程在OPM中定义为应用于一个或多个对象的转换模式(方框5.3)。
Processes generally involve the creation or destruction of an operand or a change in an operand.
进程通常涉及操作数的创建或销毁或操作数的更改。
In our examples, we identify housing of the resident, where housing is a process.
在我们的例子中，我们确定了居民的住房，其中住房是一个过程。
This process changes a resident from un-housed to housed.
这一过程将居民从无住房变为有住房。
For the aircraft emergency instruction card, the process is the instructing of the passenger.
对于飞机应急指令卡，过程是乘客的指令。
Instructing changes the knowledge of the passenger.
指示改变了乘客的认识。
Process is a pattern of transformation undergone by an object.
过程是对象经历的一种转变模式。
Processes generally involve creation of, destruction of, or a change in an operand.
过程通常包括操作数的创建、销毁或更改。
Box 5.3 Definition: Process In contrast with objects, a process is transient and dynamic and takes place along a timeline.
与对象相比，进程是瞬时的、动态的，并且沿着时间轴发生。
You cannot take a photograph of process;
你不能拍过程的照片;
you need to take a video.
你需要拍个视频。
No single frame of the video reveals process;
视频没有单一帧显示过程;
it is only when the entire sequence of frames is viewed that process can be comprehended.
只有当看到整个帧序列时，这个过程才能被理解。
Imagine a video of a sprinter crossing a finish line.
想象一下一个短跑运动员冲过终点线的视频。
If we look at one frame alone, or at the international symbol for running (Figure 5.1), we can only infer dynamics.
如果我们单独看一个框架，或者看跑步的国际符号(图5.1)，我们只能推断出动力学。
Cartoonists have developed a series of tricks to hint at motion within a single frame.
漫画家已经开发了一系列的技巧来暗示在一个单一的框架运动。
Is the person on the left taking the hubcap off or putting it on
左边的人是取下轮毂盖还是戴上轮毂盖
Figure 5.1 examples of the difficulty of expressing process, which is inherently dynamic, with a static image: illustration showing hubcap removal, a symbol for running, and a cartoon for running.
图5.1说明了表达过程的难度的例子，本质上是动态的，用一个静态图像:显示轮毂盖移除的插图，运行的符号，和运行的卡通。
(source: (b) miguel angel salinas salinas/shutterstock (c) screwy/shutterstock.)
(资料来源:(b) miguel angel salinas salinas/shutterstock (c) screwy/shutterstock。)
Analytical Representation of Function In order to proceed further with the analysis of function, we need to develop an explicit analytical representation of process and operands.
函数的解析表示为了进一步分析函数，我们需要开发一个过程和操作数的解析表示。
In the imprecise style of the figures of Chapter 2, we simply drew a round-cornered rectangle and wrote the statement of form, the process, and the operand inside.
按照第二章中不精确的图形样式，我们简单地画了一个圆角的矩形，并写下了形式、过程和其中的操作数的表述。
OPM has a set of symbols used to represent objects and processes and their interactions (see Figure 5.2).
OPM有一组符号用于表示对象和进程及其交互(参见图5.2)。
The process is shown by the oval, with a label indicating the name of the process.
该过程显示在椭圆形，与标签表明的名称的过程。
The operand is shown as a rectangle, because it is an object, with the name of the operand written inside.
操作数显示为矩形，因为它是一个对象，其中写入了操作数的名称。
The function is made up of these two OPM elements, the process and the operand, but does not have a separate OPM symbol.
该函数由进程和操作数这两个OPM元素组成，但没有单独的OPM符号。
In OPM, there are three ways of representing the relationships between an operand and a process, as shown in Figure 5.2.
在OPM中，有三种表示操作数和进程之间关系的方法，如图5.2所示。
A single-headed arrow running from the process to the operand implies that the process creates the operand, as a factory would create a car, or as a team develops a design.
从进程运行到操作数的单箭头表示进程创建操作数，就像工厂创建汽车，或者团队开发设计一样。
The car or design did not exist before the process, and after the process, it did.
在这个过程之前，汽车或设计是不存在的，而在这个过程之后，它就存在了。
A single-headed arrow running from the operand to the process implies that the process consumes the operand, as when a factory consumes parts (to make a car), or the lungs consume
从操作数运行到进程的单箭头表示进程消耗操作数，就像工厂消耗部件(制造一辆汽车)或肺消耗部件一样
Figure 5.2 oPm diagram of process + operand yielding function.
图5.2进程+操作数生成函数的oPm图。
from top to bottom, these represent the process affecting the operand, consuming the operand, and producing the operand
从上到下，它们表示影响操作数、使用操作数和产生操作数的进程
oxygen from the air in the lungs (in order to transport it to the tissue and organs).
肺部空气中的氧气(以便将其输送到组织和器官)。
Consumption is relatively rare.
消费相对较少。
It implies that the abstraction of the operand no longer exists in the original nature and place after the process executes.
它意味着操作数的抽象在进程执行后不再存在于原始的性质和位置。
Note that in the car factory example, the parts still exist after they leave the factory, but they have become part of another abstraction, called the car.
注意，在汽车工厂示例中，部件在离开工厂后仍然存在，但是它们已经成为另一个抽象的一部分，称为汽车。
A double-headed arrow implies that the process affects the operand but does not consume or produce it.
双箭头表示进程影响操作数，但不消耗或产生操作数。
The residents were people both before and after moving into the house.
住户搬进这所房子前后都是人。
The only difference was that their attribute of being housed was changed.
唯一的不同是它们被安置的属性改变了。
The existence of the operand did not change: rather, some attribute of the operand was changed by the process.
操作数的存在性没有改变:相反，操作数的某些属性被进程改变了。
OPM reserves the round-headed arrow as the symbol that links the instrument object with the process that it enables.
OPM保留圆头箭头作为连接仪器对象和它所支持的过程的符号。
The process then connects, with the appropriate pointed arrow (create, destroy, or affect), to the operand.
然后，进程用适当的箭头(创建、销毁或影响)连接到操作数。
We are now in a position to analytically diagram form and function, as illustrated in the canonical model of a system shown in Figure 5.3.
我们现在可以用图表分析形式和功能，如图5.3所示的系统的规范模型所示。
A more explicit representation of the canonical system is illustrated in Figure 5.4, in which the states of the operand are explicitly shown.
规范系统的更显式的表示如图5.4所示，其中显式地显示了操作数的状态。
This view emphasizes that the operand changes its state through the action of the process enabled by the instrument objects.
这个观点强调了操作数通过仪器对象激活的过程的动作来改变它的状态。
This representation that emphasizes the states of the operand is closer to the way in which SysML expresses function using the state machine diagram.
这种强调操作数状态的表示更接近SysML使用状态机图表达函数的方式。
SysML state machine diagrams are made of states (rounded boxes), transitions (arrows), and events/signals (rectangles with an inward or outward triangle).
SysML状态机图由状态(圆角框)、转换(箭头)和事件/信号(带有向内或向外三角形的矩形)组成。
Transitions triggered by events or signals capture the conditions under which the system goes from one state to another.
由事件或信号触发的转换捕获系统从一种状态转换到另一种状态的条件。
An example of a typical SysML state machine diagram (from a robot controller) is given in Figure 5.5.
图5.5给出了一个典型的SysML状态机图示例(来自一个机器人控制器)。
Recall that one of the differences between SysML and OPM is that SysML separates description of form and structure from description of function and behavior.
回想一下，SysML和OPM之间的区别之一是，SysML将形式和结构的描述从功能和行为的描述中分离出来。
Thus the SysML state machine diagram contains only functional information and does not show any relevant objects;
因此，SysML状态机图只包含功能信息，不显示任何相关对象;
note that neither the instruction card nor the air traveler appears on the state machine diagram of Figure 5.6.
注意，在图5.6的状态机图中既没有指令卡，也没有航空旅客。
In summary: Function is the activity, operation, or transformation that causes or contributes to performance.
总而言之:功能是导致或促成性能的活动、操作或转换。
Function is composed of process and operand.
函数由进程和操作数组成。
Process is the pure transformation, while the operand is an object acted upon by the process.
过程是纯粹的转换，而操作数是被过程作用的对象。
Processes are generally creation, transformation, and destruction.
过程通常是创造、转换和破坏。
The canonical model of a system consists of the operand, the process designed to change it in such a way as to create value, and the instrument object that enables the process.
系统的规范模型由操作数、以创造价值的方式改变它的进程和支持该进程的工具对象组成。
5.3 Analysis of External Function and Value Primary Externally Delivered Function We now turn our attention to Question 5a in Table 5.1: What is the primary externally delivered value-related function?
5.3外部功能和价值主要外部传递功能的分析现在我们将注意力转向表5.1中的问题5a:主要外部传递的价值相关功能是什么?
We can parse this statement into two parts.
我们可以将这个语句解析为两部分。
First, the function must be externally delivered;
首先，功能必须由外部提供;
it must cross the boundary of the system and influence something in the context.
它必须跨越系统的边界，影响环境中的某些东西。
Second, there is a primary function the function for which the system was built.
其次，有一个主要功能，即系统为之建立的功能。
The primary externally delivered functions for several example systems are given in Table 5.2.
表5.2给出了几个示例系统的主要外部交付功能。
There are systems that apparently are built only for their form.
有些系统显然是为它们的形式而建立的。
These are often associated with aesthetics, accomplishment, or collecting art, trophies, and coins, for example.
这些通常与美学、成就或收藏艺术品、战利品和硬币等联系在一起。
These elements of form actually have a function: pleasing + the viewer, impressing + others, and satisfying + a need to collect, respectively.
这些形式元素实际上有一个功能:愉悦+观众，印象深刻+他人，满足+收集的需要，分别。
If you were not pleased by art, you would not buy it or travel to see it.
如果你对艺术不满意，你就不会买它，也不会去旅游看它。
The function of these kinds of specialized forms is tied to the human reaction to the forms.
这些特殊形式的功能与人类对这些形式的反应是息息相关的。
The form, however, still delivers functions.
然而，表单仍然提供功能。
Function delivers value when it acts externally to the system.
功能在系统外部发挥作用时提供价值。
It is important that the function is externally delivered, that it is not only internal to the system.
重要的是，功能是外部交付的，而不仅仅是系统内部的。
This implies an important rule of systems: Function and value are always delivered at an interface in the system boundary.
这意味着一个重要的系统规则:功能和价值总是在系统边界的接口上交付。
For example, referring to some of the examples listed in Table 5.2, value is created only when the amplified signals are delivered at the output;
例如，参考表5.2中列出的一些例子，只有当放大信号在输出端发送时，才会产生值;
only when the team delivers a design;
只有当团队提交了一个设计;
and only when the oxygen is delivered to an organ or tissue.
只有当氧气被输送到一个器官或组织时。
Built systems have a primary externally delivered function.
构建的系统有一个主要的外部交付的功能。
This is the function for which the system is built, or at least originally was built.
这是系统构建的功能，或者至少是最初构建的功能。
If the built system does not deliver this function, it will be a failure.
如果构建的系统没有交付此功能，则将失败。
Operational amplifiers are built to amplify;
运算放大器是用来放大的;
they may also filter high frequencies, but if they do not amplify, they are a failure.
它们也可以过滤高频，但如果不放大，就会失败。
Team X is created to deliver a design: if it does not do so, it is a failure.
团队X是为了交付设计而创建的:如果它不这样做，那么它就是失败的。
The reason we focus on primary function is that in modern practice, engineers have an enormous list of requirements and potential features to deliver.
我们关注主要功能的原因是，在现代实践中，工程师有大量的需求和潜在的特性要交付。
Many products are delivered that fail to provide the primary function, providing instead a host of secondary features.
许多交付的产品没有提供主要功能，而是提供了许多次要功能。
Witness the challenges encountered by Apple when the iPhone case interfered with the radio antenna, disabling the primary function.
看看苹果遇到的挑战吧，iPhone的外壳干扰了无线电天线，导致主要功能瘫痪。
The architect should try to reason about the primary function, before being distracted by other features.
在被其他功能分散注意力之前，架构师应该尝试对主要功能进行推理。
The test to identify the primary value-related function is therefore: What is the function that the system was originally built to deliver, before all of the other value-related functions were added?
因此，识别主要价值相关功能的测试是:在添加所有其他与价值相关的功能之前，系统最初构建要交付的功能是什么?
Or, Which function, if it failed to materialize, would cause the operator to discard or replace the system?
或者，哪个功能，如果它没有实现，会导致操作员抛弃或替换系统?
We will call all the other externally delivered functions secondary functions and will discuss them in Section 5.6.
我们将把所有其他外部交付的功能称为次要功能，并将在5.6节中进行讨论。
Value-Related Operands Systems deliver value when they execute their primary externally delivered function.
与值相关的操作数系统在执行其主要的外部传递的功能时传递值。
As indicated in Box 5.4, value is defined as benefit, worth, importance, or utility for some associated
如方框5.4所示，价值被定义为相关利益、价值、重要性或效用
Value is benefit at cost.
价值就是以成本计算的收益。
Benefit is synonymous with the worth, importance, or utility created by a system.
效益是一个系统所创造的价值、重要性或效用的同义词。
An observer judges benefit subjectively.
观察者的判断是主观的。
Cost is a measure of the contribution that must be made in exchange for the benefit.
成本是衡量为换取利益而必须做出的贡献。
cost.
成本。
Good value can therefore be created by high benefit at modest cost, or by modest benefit at low cost.
因此，好的价值可以通过低成本的高收益或低成本的低收益来创造。
Note that others sometimes define the term value as a synonym of benefit, but we will consistently equate value to benefit at cost.
请注意，有些人有时将术语价值定义为利益的同义词，但我们始终将价值等同于成本利益。
A similar definition is found in Lean Enterprise Value [1]: Value is how various stakeholders find particular worth, utility, benefit, or reward in exchange for their respective contributions to the enterprise.
精益企业价值[1]中也有类似的定义:价值是各利益相关者为各自对企业的贡献寻找特定价值、效用、利益或回报的方式。
If the system is working properly, value will be delivered when the function emerges (Box 5.5), but this is far from certain.
如果系统正常工作，在函数出现时就会发送值(框5.5)，但这还远不能确定。
Value is subjective and is judged by an observer who is not the architect but, rather, is the customer, beneficiary, or user.
价值是主观的，由观察者来判断，观察者不是架构师，而是客户、受益人或用户。
(The procedure for trying to ensure that systems are designed so that they actually deliver value is the subject of Chapter 11.)
(第11章的主题是试图确保系统被设计成能够实际交付价值的程序。)
Design must reflect the practical and aesthetic in business, but above all good design must primarily serve people.
设计必须反映商业的实用性和美感，但最重要的是，好的设计必须首先服务于人。
thomas J. Watson, chairman of iBm A cynic is a man who knows the price of everything and the value [i.e.
“玩世不恭者”是一个知道所有东西的价格和价值的人。
, the benefit] of nothing.
毫无益处。
oscar Wilde Good architectures deliver benefit, first and foremost, built on the primary externally delivered function of the systems by focusing on the emergence of functions, and their delivery across the system boundary at an interface.
好的架构提供的好处，首先也是最重要的是，通过关注功能的出现，以及它们在界面上跨系统边界的交付，构建在系统的主要外部交付功能之上。
The benefit delivered by systems is provided by their externally delivered function.
系统提供的好处是由外部提供的功能提供的。
There is usually a single externally delivered function for which the system was origi nally defined, the absence of which will cause failure of the system.
通常有一个单一的外部传递的功能是系统最初定义的功能，缺少它将导致系统的故障。
The benefit is delivered at the boundary of the system, most likely at an interface.
好处是在系统的边界交付的，很可能是在接口。
It is critical to identify the value-related operand from among all of the operands on which the system acts.
从系统操作的所有操作数中识别与值相关的操作数是至关重要的。
You can identify the value-related operand by asking, What operand does the system exist to influence: to create, destroy, or affect?
您可以通过以下问题来识别与值相关的操作数:系统存在以影响哪些操作数:创建、破坏或影响?
For example, the operational amplifier clearly exists to create the high-amplitude output signal.
例如，运算放大器的存在显然是为了产生高振幅的输出信号。
We should also consider the attribute of the operand whose change is associated with value, in this case the amplitude (Table 5.2).
我们还应该考虑变化与值相关的操作数的属性，在本例中是振幅(表5.2)。
The system delivers value when the process amplifying
当流程放大时，系统会传递价值
acts on the operand signal in such a way as to change its value-related attribute amplitude to the state of high.
作用于操作数信号，使其与值相关的属性振幅变为高的状态。
Figure 5.7 shows several ways in which this external function delivery can be diagrammed in OPM.
图5.7显示了在OPM中绘制这种外部功能交付图的几种方法。
For Team X, the final design is the value-related operand.
对于X团队，最终的设计是与值相关的操作数。
The team will undoubtedly produce other outputs: discarded options, analysis, time cards, and the like.
团队无疑会产生其他的结果:废弃的选项、分析、时间卡等等。
But the reason why Team X exists is to produce the final design.
但X团队存在的原因是要制作最终的设计。
When the boss asks, Is the design complete yet?
当老板问:设计完成了吗?
it is an indication of the value-related function.
它是与价值相关的功能的指示。
We can now finish answering Question 5a of Table 5.1.
现在我们可以完成表5.1中的问题5a。
Focus on the primary externally delivered function and ask: What is the most specific way to describe the operand on which the system acts on the way to delivering value?     
关注主要的外部交付的功能，问一问:系统在交付价值的过程中作用的操作数最具体的描述方法是什么?
What is the attribute of this operand whose change is associated with the delivery of value, and what is the final state associated with value?
这个操作数的属性是什么，它的更改与值的传递相关联，与值相关联的最终状态是什么?
What is the specific process executed by the system to change the value-related state  of this specific operand?
系统执行什么特定进程来改变这个特定操作数的值相关状态?
For our pump example, the answers to these questions are as follows: The operand is water, the value-related attribute is pressure (which should be high), and the process is pressurizing.
对于我们的泵示例，这些问题的答案如下:操作数是水，与值相关的属性是压力(应该是高的)，过程正在加压。
How do we know that the value-related operand is the high-pressure water?
我们怎么知道与值相关的操作数是高压水?
The pump can be thought of as consuming low-pressure water and discharging high-pressure water, as shown in Figure 5.8.
可以认为该泵消耗低压水，排放高压水，如图5.8所示。
We don t build pumps to consume low-pressure water, but we do build them to produce highpressure water.
我们造水泵不是为了消耗低压水，但我们造水泵是为了生产高压水。
Therefore, the high-pressure water is the value-related operand.
因此，高压水是与数值相关的操作数。
An alternative
另一种选择
representation in OPM is illustrated in Figure 5.9, which shows water as the operand, and the process changing the state associated with the attribute of pressure.
OPM的表示法如图5.9所示，它显示了水作为操作数，以及改变与压力属性相关的状态的过程。
In bubblesort, the sorted array is the value-related operand.
在bubblesort中，排序后的数组是与值相关的操作数。
Sorted-ness is the attribute, and sorted is the state associated with value.
排序是属性，排序是与值相关联的状态。
The sorting process can be thought of as consuming the unsorted array and producing the value-related operand: the sorted array.
排序过程可以被认为是使用未排序的数组并产生与值相关的操作数:已排序的数组。
Or the process can be thought of as changing the attribute of sorted-ness for the array from unsorted to sorted.
或者，这个过程可以被认为是将数组的排序属性从未排序更改为排序。
Often, there are operand objects present that are not directly related to the delivery of value, which we will simply call other operands.
通常，存在一些与值传递不直接相关的操作数对象，我们将其称为其他操作数。
For example, in bubblesort, the array length variable that is passed to the procedure is an operand, but it is not the value-related operand.
例如，在bubblesort中，传递给过程的数组长度变量是一个操作数，但不是与值相关的操作数。
It is simply another operand used in sorting.
它只是排序中使用的另一个操作数。
Low-pressure water and electrical power are other operands of the pump.
低压水和电力是泵的其他操作。
Before we leave this section, we will introduce one more simple system, a kitchen that  makes sliced bread.
在我们结束这部分之前，我们将介绍另一个简单的系统，一个制作切片面包的厨房。
The last line of Table 5.2 summarizes the system: The externally delivered value-related operand is sliced bread.
表5.2的最后一行总结了系统:外部提供的与值相关的操作数是切片面包。
Thus bread is the operand, sliced is the value-related state, and making is the process.
因此面包是操作数，切片是与价值相关的状态，而制作是过程。
In summary: The primary externally delivered function of a system emerges when the process acts across a boundary of the system at an interface.
总而言之:当流程在接口上跨越系统的边界时，系统的主要外部交付功能就出现了。
The benefit of a system is linked to the externally delivered function.
系统的好处是与外部交付的功能联系在一起的。
Benefit materializes as a consequence of a process acting on the value-related operand.
好处是作为过程作用于与值相关的操作数的结果而实现的。
Analyze the operand, the value-related attribute and its change in state, and the process
分析操作数、与值相关的属性及其状态变化，以及进程
5.4 Analysis of Internal Function Internal Function Next we analyze the internal function (Question 5b of Table 5.1).
5.4内部功能分析内部功能接下来我们分析内部功能(表5.1问题5b)。
Within a system, there are internal functions and relationships among these internal functions.
在一个系统中，有内部的功能和这些内部功能之间的关系。
Together these define the functional architecture of the system.
它们一起定义了系统的功能体系结构。
The externally delivered function, performance, and ilities emerge from these internal functions and relationships.
外部交付的功能、性能和职责来自于这些内部功能和关系。
First, we identify the important internal functions or the entities of function (discussed in this section).
首先，我们确定重要的内部功能或功能实体(在本节中讨论)。
Then we construct the functional architecture (discussed in Section 5.5) when we connect up the entities of function.
然后，我们在连接功能实体时构建功能架构(在第5.5节中讨论)。
These two steps are similar to the procedure used in systems engineering of functional decomposition.
这两个步骤类似于系统工程中使用的功能分解过程。
[2] The key task is to identify the entities of internal function.
[2]的关键任务是识别实体的内部功能。
We have already encountered internal functions in the simple examples of Chapter 2.
我们已经在第2章的简单示例中遇到了内部函数。
Notice that each of these internal functions has an operand part and a process part, as shown in Table 5.3.
请注意，每个内部函数都有一个操作数部分和一个进程部分，如表5.3所示。
For the operational amplifier, gain is an operand, and setting is a process.
对于运算放大器来说，增益是一个操作数，而设置是一个过程。
The output signal (with voltage as a state) is an operand, and increasing is the process.
输出信号(电压作为一种状态)是一个操作数，增加是一个过程。
Identifying Internal Function How did we identify the internal functions?
识别内部功能我们是如何识别内部功能的?
There are several approaches, including reverse engineering of the form, standard blueprints, and metaphor.
有几种方法，包括表单的反向工程、标准蓝图和隐喻。
In reverse engineering, we start with
在逆向工程中，我们从
the elements of form and reverse-engineer their functions.
形式元素和对其功能进行反向工程。
In the op-amp circuit there are only three elements.
在运放电路中只有三个元件。
We reason, What do these elements do?
我们思考，这些元素做了什么?
A modest understanding of active analog circuits would reveal that the voltage divider in a feedback loop sets the effective gain for the op-amp, and the op-amp amplifies a signal.
对有源模拟电路有一定的了解，就会发现反馈回路中的分压器决定了运放的有效增益，而运放放大信号。
Table 5.3 lists the internal functions of Team X. How did we identify these internal functions?
表5.3列出了x团队的内部职能，我们是如何确定这些内部职能的?
This is a case in which we can apply our understanding of a standard blueprint of process.
在这种情况下，我们可以应用我们对过程标准蓝图的理解。
There are some combinations of processes that often go together to achieve an emergent function.
有一些过程的组合，常常一起去实现一个紧急功能。
For example, Box 5.6 describes a standard blueprint for making a decision.
例如，框5.6描述了一个用于决策的标准蓝图。
Box 5.6 Insight: Standard Blueprints of Internal Processes Sometimes functions just naturally unfold into a set of internal functions that are stable over many years.
框架5.6:内部流程的标准蓝图有时只是自然地展开为一组多年稳定的内部功能。
We call these standard blueprints.
我们称之为标准蓝图。
For example, when you compare the internal functions associated with riding a horse from your house to town 150 years ago (get the horse out of the barn, mount the horse, ride to town while navigating, arrive, and stable the horse) with the internal functions associated with driving a car from your house to the office today get in the car, (get the car out of the garage, drive while navigating, arrive, and park the car),
例如,当你在考虑对比内部功能与骑马从你的房子到另一个城镇150年前(马的马厩,上马,骑到城里当导航,到达稳定的马)与内部功能与开车从你的房子到办公室今天上车,(把车从车库开,而导航,到达,和公园的车),
you discover remarkable stability in these blueprints for internal process.
您会发现内部流程的这些蓝图具有显著的稳定性。
This may be because this is inherently a stable blueprint or because we use the blueprints of prior internal functions when we develop new systems.
这可能是因为这本身就是一个稳定的蓝图，或者是因为我们在开发新系统时使用了之前内部功能的蓝图。
In either case, the blueprint is useful in understanding new systems.
无论哪种情况，蓝图都有助于理解新系统。
Some examples of standard blueprints are: Transporting something with mass: overcome gravity, overcome drag, guide the mass Transferring information: encode the information, transmit while directing, decode the information Engaging an employee: recruit a candidate, conclude an agreement, train them, assign tasks, and periodically evaluate Making a decision: gather evidence, develop options, develop decision criteria, evaluate options, and decide Assembling parts:
标准图纸的一些例子包括:运输和质量的东西:克服重力,克服阻力,引导大众传递信息:编码信息,传输当导演,解码的信息员工接触:招募候选人,达成协议,培训他们,分配任务,并定期评估作出决定:收集证据,开发选项,开发决策标准,评估选择,并决定组装部分:
bring parts together, inspect them, assemble them, test the assembled system
把零件放在一起，检查它们，组装它们，测试组装的系统
Because developing a design is basically making a set of decisions, we would not be surprised if the internal processes of Team X therefore followed something of the blueprint of a decision process: Finalizing the requirements (Table 5.3) is gathering evidence and developing decision criteria (Box 5.6);
因为开发设计基本上就是做一组决策，所以如果X团队的内部过程遵循了决策过程的蓝图，我们不会感到惊讶:最终确定需求(表5.3)就是收集证据和制定决策标准(框5.6);
developing design concepts is developing options;
发展设计概念就是发展选择;
and approving the design is evaluating options and making a decision.
批准设计就是评估选项并做出决定。
For the circulatory system, Table 5.3 indicates the internal functions.
循环系统的内部功能如表5.3所示。
How did we identify these?
我们是如何识别这些的?
In this case, you might consider a home heating system as a metaphor for the human circulatory system.
在这种情况下，你可以把家庭供暖系统看作是人类循环系统的隐喻。
In each there is a working fluid (water/blood) that absorbs something (heat/oxygen), and is pumped to a delivery point.
每个容器中都有一种工作液体(水/血液)，它吸收一些东西(热量/氧气)，并被泵送到输送点。
Other approaches to analyzing internal functions include the three techniques we developed in Chapter 2 for predicting emergence: precedent, analysis, and experiments.
其他分析内部功能的方法包括我们在第2章中开发的用于预测出现的三种技术:先例、分析和实验。
Often, just observing operations is valuable too.
通常，仅仅观察操作也是有价值的。
In applying these approaches, we must first focus on the internal processes that lead to the creation of value.
在应用这些方法时，我们必须首先关注导致价值创造的内部过程。
We must also apply domain knowledge and experience.
我们还必须应用领域的知识和经验。
We can now apply this procedural guidance to analyze making sliced bread.
我们现在可以应用这个程序指导来分析制作切片面包的过程。
We could just observe someone making bread, or we could infer the internal processes from a standard blueprint for cooking: chop/mix food, heat, and break into chunks.
我们可以只是观察某人在做面包，或者我们可以从烹饪的标准蓝图中推断出内部过程:切碎/混合食物，加热，然后切成块。
It is not much of a jump from this blueprint to bread: mix to produce dough, heat to produce bread, and cut to produce slices.
从这个蓝图到制作面包，并没有太大的跳跃:混合成面团，加热成面包，切成薄片。
Figure 5.10 shows the OPM diagram for this set of internal processes.
图5.10显示了这组内部流程的OPM图。
Turning our attention to the pump, we focus on the value-related external function of pressurizing the water.
把我们的注意力转向泵，我们关注的是与价值相关的外部功能，加压水。
It requires significant domain knowledge to identify the internal function of the system.
识别系统的内部功能需要重要的领域知识。
The pump first increments kinetic energy and then trades it for the potential energy associated with pressure.
泵首先增加动能，然后用它交换与压强相关的势能。
Thus, in addition to the inflow and outflow functions, the two principal internal functions are accelerating to produce internal high-velocity flow and diffusing to produce internal high-pressure flow.
因此，除了流入和流出功能外，两个主要的内部功能是加速产生内部高速流动和扩散产生内部高压流动。
The matrix approach to representing internal function is to create an array that has the process on one axis and the operands on the second.
表示内部函数的矩阵方法是创建一个数组，其中进程在一个轴上，操作数在第二个轴上。
We will call this the PO array (for processoperand).
我们将其称为PO数组(用于处理操作数)。
Looking only at the create steps of Table 5.4 shows the internal processes for the pump.
仅查看表5.4中的创建步骤就可以看到这个泵的内部进程。
Adding the destroy steps indicates the functional architecture, as discussed below.
添加销毁步骤表明功能架构，如下所述。
For the bubblesort code, focus on the external value-related operand, the sorted array.
对于bubblesort代码，重点关注与值相关的外部操作数，即排序数组。
Imagine a metaphor: You are at a gambling table sorting a hand of cards from smallest to largest.
想象一个比喻:你坐在赌桌前，将一手牌从最小的到最大的排序。
You might exchange them pairwise until they are sorted.
你可以成对地交换它们，直到它们被排序。
We can also reverse-engineer the pseudocode, identifying what the lines of code do.
我们还可以对伪代码进行反向工程，识别代码行的功能。
We can consider the algorithm as a blueprint
我们可以把算法看作一个蓝图
Applying these techniques, we identify four internal functions associated with looping + I index, looping + J index, testing + array entries, and conditionally exchanging + array entries.
应用这些技术，我们确定了四个与循环+ I索引、循环+ J索引、测试+数组项和有条件地交换+数组项相关的内部函数。
The OPM diagram of the internal functions of bubblesort (Figure 5.11) shows the internal functions.
bubblesort内部功能的OPM图(图5.11)显示了内部功能。
Looping affects the index value, in that it increments the value (changing its state), but it does not create or destroy the index.
循环会影响索引值，因为它会增加值(改变值的状态)，但不会创建或销毁索引。
Likewise, exchanging affects the location or value of an array entry but does not create or destroy the entry.
同样，交换影响数组项的位置或值，但不会创建或销毁该项。
The array entries are actually an instrument of testing, and testing does not change anything about the array element;
数组条目实际上是一个测试工具，测试不会改变数组元素的任何东西;
it just uses the information to make a decision.
它只是利用这些信息来做决定。
This is an example of an operand object being used as an instrument.
这是一个操作数对象被用作工具的例子。
Objects that are operands appear dynamically during operations and usually are transformed, but they can also act as instruments of subsequent processes.
作为操作数的对象在操作期间动态出现，通常会进行转换，但它们也可以作为后续进程的工具。
In summary: Within a system, there are internal functions, which include internal processes and internal operands.
总而言之:在一个系统中，有内部函数，包括内部进程和内部操作数。
The procedure for identifying the internal functions includes these steps: Focus on the primary externally delivered function, the value-related operand that leads to the creation or destruction of, or has an effect on, the value-related operand.
识别内部函数的过程包括以下步骤:关注主要的外部传递的函数，与值相关的操作数，它导致与值相关的操作数的创建或销毁，或对其产生影响。
Involve domain experts;
涉及领域专家;
there is no substitute for experience.
经验是无可替代的。
Use the reverse engineering of key elements of form, standard blueprints in your field, and metaphors to understand internal functions.
通过对表单的关键元素、你所在领域的标准蓝图和隐喻的逆向工程来理解内部功能。
5.5 Analysis of Functional Interactions and Functional Architecture Functional Interactions and Functional Architecture Having identified the entities of internal function, we can move to Question 5c of Table 5.1: What is the functional architecture?
在确定了内部功能实体之后，我们可以转向表5.1中的问题5c:什么是功能架构?
Answering this question requires understanding the relationships among the entities of function, which in Chapter 2 we called the interactions.
回答这个问题需要理解功能实体之间的关系，在第2章中我们称之为交互作用。
This is the key step in analyzing architecture, because it is through the interaction of the internal functions that the externally delivered function emerges.
这是分析架构的关键步骤，因为外部交付的功能是通过内部功能的交互出现的。
The key idea is that the exchanged or shared operands are the functional interactions.
关键思想是交换或共享操作数是函数交互。
The functions plus the functional interactions are the functional architecture.
功能加上功能交互就是功能架构。
A graphical OPM representation of the functional architecture of bread slice making is shown in Figure 5.12.
面包片制作功能架构的OPM图形表示如图5.12所示。
Comparing Figure 5.12 to Figure 5.10 reveals that additional input
比较图5.12和图5.10可以发现额外的输入
operands have been identified: flour, water, salt, and yeast.
操作对象已经确定:面粉、水、盐和酵母。
The inputs are consumed by the mixing process;
所述输入由混合过程消耗;
after mixing they no longer exist as entities.
混合后，他们不再作为实体存在。
Mixing produces dough that is consumed by baking, after which the dough no longer exists.
混合产生的面团被烘烤消耗，之后面团就不存在了。
Likewise, the bread is consumed by cutting, and slices are produced.
同样地，面包是通过切面包来消耗的，然后切片生产出来。
The operands of flour, water, yeast, salt, dough, bread, and slices are the interactions between the processes, being destroyed or created by mixing, baking, and cutting.
面粉、水、酵母、盐、生面团、面包和面包片的操作数是这些过程之间的相互作用，它们被混合、烘烤和切割破坏或创造。
The processes now connect to more than one operand, and the operands connect the processes.
进程现在连接到一个以上的操作数，操作数连接进程。
The external value-related operand (slices) cross the system boundary.
与值相关的外部操作数(片)跨越系统边界。
A matrix-like representation called the process-operand array can represent the same information (Box 5.7).
称为进程操作数数组的类似矩阵的表示可以表示相同的信息(方框5.7)。

----box
OPM diagrams of internal process and process-operand (PO) arrays enable us to visualize and analyze the internal functional architecture.
内部进程和进程操作数(PO)数组的OPM图使我们能够可视化和分析内部功能体系结构。
Most people find it easier to sketch the OPM diagram and then convert it into a PO array, rather than trying to create the PO array from scratch.
大多数人发现绘制OPM图并将其转换为PO数组比从头创建PO数组更容易。
Both are useful representations, and each has a role to play in understanding systems. 
两者都是有用的表示法，并且在理解系统中都扮演着重要的角色。
The procedure for translating an OPM diagram of internal function into a PO array is as follows: Create an array in which the rows are processes and the columns are operands.
将内部函数的OPM图转换为PO数组的过程如下:创建一个数组，其中行是进程，列是操作数。
Isolate each process on the OPM diagram, and encode the connection between the process and connected operands in the row for the process, using the notation of Figure 5.2 and Figure 5.3.
隔离OPM图上的每个进程，并使用图5.2和图5.3中的符号对进程和连接的操作数之间的连接进行编码。
Operands that are created by the process go into the PO array with a prime ( ), and a notation (such as c ) is placed in the column for the operand.
进程创建的操作数使用素数()进入PO数组，并在该操作数的列中放置符号(如c)。
This prime becomes important later when we are tracking causality in the system.
当我们在系统中追踪因果关系时，这个初始值会变得很重要。
Operands that are affected by the process (a), are destroyed by the process (d), or are instruments of the process (I) exist before the process and go into the PO array with no prime and with the appropriate notation placed in the column for the operand
被进程(a)影响的操作数，被进程(d)破坏的操作数，或者是进程的工具(I)存在于进程之前，进入没有素数的PO数组中，并在该操作数的列中放置适当的符号
Such a simple flow-through representation of interactions between processes is pleasing in its simplicity, and this kind of representation appears in many different types in engineering: pipe and flow software, control system block diagrams, SysML activity diagrams, and so on.
这样一个简单的流程间交互的流式表示很简单，而且这种表示在工程中出现在许多不同的类型中:管道和流软件、控制系统框图、SysML活动图，等等。
In such simple flow-through systems, there is a unique operand that is created by the upstream process and destroyed by the downstream process, which constitutes the interaction.
在这种简单的流通系统中，有一个由上游进程创建并由下游进程销毁的唯一操作数，它构成了交互作用。
Identifying Functional Interactions Having worked through the sliced bread case, we can now generalize the procedure for identifying the functional interactions.
识别功能交互已经完成了切片面包的工作，现在我们可以概括识别功能交互的过程。
Start with the diagram of the internal functions, which must include the value-related operand.
从内部函数的图开始，它必须包含与值相关的操作数。
Identify processes that are obviously missing from the diagram, such as inputting and outputting processes.
识别图表中明显缺少的流程，例如输入和输出流程。
Identify any operands that are obviously missing from the diagram of internal processes, such as inputs.
识别内部进程图中明显缺少的操作数，比如输入。
For each process, ask whether there any other operands that are needed for the function to be completely represented.
对于每个进程，询问函数是否需要其他操作数来完全表示。
For each operand, ask what other processes it interacts with.
对于每个操作数，询问它与哪些进程交互。
Trace the path from the value-related output, considering whether the desired emergence is likely to occur based on the processes and operands represented.
从与值相关的输出跟踪路径，根据所表示的过程和操作数考虑所期望的出现是否可能发生。
Figure 5.13 shows an OPM diagram of the internal functions of the pump, fit into a simple flow-through pattern, in which each process destroys an operand and creates another.
图5.13显示了泵内部功能的OPM图，符合简单的流通模式，其中每个进程销毁一个操作数并创建另一个操作数。
We can apply the procedure to derive this diagram.
我们可以应用这个程序来推导这个图。
We start with only the create information in Table 5.4, which identifies two internal functions (accelerating and diffusing), and of course
我们从表5.4中的create信息开始，它标识了两个内部函数(加速和扩散)，当然还有
we have the value-related operand (external high-pressure flow).
我们有与值相关的操作数(外部高压流)。
There must also be an inflowing process and an outflowing process, as well as an external low-pressure flow.
还必须有一个流入过程和一个流出过程，以及一个外部低压流。
Between the processes of inflowing and accelerating, there must be an internal operand labeled internal lowpressure flow.
在注入和加速过程之间，必须有一个称为内部低压流的内部操作数。
With all the operands present, we connect the operands to processes as shown.
有了所有的操作数，我们将操作数连接到进程，如下所示。
We can now identify the interactions between the processes.
我们现在可以识别过程之间的交互。
For example, the interaction between the inflowing and accelerating processes is the exchange of the internal low-pressure flow operand.
例如，注入和加速过程之间的相互作用是内部低压流动操作数的交换。
The interpretation of the abstractions for the internal functions of a system is not unique, unlike decomposition of form, which is more tangible and therefore definite.
对系统内部功能的抽象解释并不是唯一的，不像形式的分解，形式更有形，因此也更明确。
There are often several equally valid ways to define the internal processes and operands.
通常有几种同样有效的方法来定义内部进程和操作数。
The real question centers on whether emergence is easily understood and predicted.
真正的问题在于出现是否容易理解和预测。
For example, Figure 5.13 gives the impression of the pump as a simple flow-through system.
例如，图5.13给人的印象是泵是一个简单的流通系统。
But we recognize that the water is not really destroyed by a process, and new water is not really created.
但我们认识到，水并没有真正被一个过程破坏，新的水也没有真正被创造出来。
What really happens is that the state of the water changes.
实际上，水的状态发生了变化。
Figure 5.14 captures this
图5.14捕捉到了这一点
alternative representation, showing that the internal flow has two important attributes: pressure and velocity.
交替表示，表明内部流动有两个重要的属性:压力和速度。
The accelerating process changes the velocity (from low to high), and the diffusing process changes both the velocity (from high to low) and the pressure (from low to high).
加速过程改变速度(从低到高)，扩散过程改变速度(从高到低)和压力(从低到高)。
Such a representation of state change loses the sense of simple flow-through but more accurately captures the physics.
这种状态变化的表述失去了简单的流通感，但更准确地捕捉了物理学。
The PO array that is the equivalent of Figure 5.14 is shown in Table 5.5.
与图5.14等价的PO数组如表5.5所示。
Now the operands at the top of the array explicitly show the states.
现在数组顶部的操作数显式地显示了状态。
The a under velocity state implies that the accelerating process affects (hence a ) the velocity state.
速度状态下的a表示加速过程影响速度状态(因此a)。
The Value Pathway The exchanges of operands are the interactions among the processes, and the combination of the operands and internal processes is the functional architecture.
操作数的交换是进程之间的相互作用，操作数与内部进程的结合是功能架构。
One of the main features of the functional architecture is the value pathway along which value develops (Question 5c).
功能架构的主要特征之一是价值发展的价值路径(问题5c)。
It is along this pathway that benefit and ultimately value develop.
正是在这条道路上，利益和价值得以发展。
It often starts with some input (low-pressure water, perhaps, or an unsorted array) and progressively moves through internal operands and processes until it reaches the value-related output.
它通常从一些输入开始(可能是低压水，或者一个未排序的数组)，然后逐步通过内部操作数和处理，直到到达与值相关的输出。
Figure 5.12, Figure 5.13, and Figure 5.14 show such internal value pathways.
图5.12、图5.13、图5.14为该内部价值路径。
Note that in flow-though functional architectures, the value pathway is often readily evident, whereas in other types of architecture, more careful reasoning may be necessary to spot it.
请注意，在流贯穿功能架构中，价值路径通常很明显，而在其他类型的架构中，可能需要更仔细的推理来发现它。
One might ask, What is not on the value pathway?
有人可能会问，什么不在价值路径上?
There are several classes of operands, processes, and objects of form that are not on the value pathway.
有几种类型的操作数、进程和形式的对象不在值路径上。
In Figure 5.15, an elaboration of the bread slicing system, the value pathway starts with dough and ends with slices, as shown by the lines.
在图5.15中，对面包切片系统的详细描述中，价值路径从面团开始，到切片结束，如图所示。
Things not on the value pathway include Entities of form, because form is not part of functional architecture and only provides an instrumental role to the processes (the oven and slicer), discussed in Chapter 4.
不在价值路径上的东西包括形式实体，因为形式不是功能架构的一部分，而只是为过程(烤箱和切片机)提供了一个工具角色，这在第4章中讨论过。
Processes and operands that support secondary externally delivered functions (frying and fried dough), discussed in Section 5.6.
支持二级外部传递功能(油炸和油炸面团)的过程和操作数，见第5.6节。
Processes and operands that don t contribute to the emergence of any desired externally delivered function.
进程和操作数不会导致任何期望的外部交付函数的出现。
These are sometimes outcomes of unwanted side-effects, of poor design (growing mold), or of legacy, and they contribute to gratuitous complexity, as will be discussed in Chapter 13.
这些有时是不希望的副作用的结果，不良的设计(生长的模具)，或遗留的结果，他们促成不必要的复杂性，将在第13章讨论。
Supporting processes and form.
支持过程和形式。
These are even further from the value pathway (the powering process enabled by the kitchen), discussed in Chapter 6.
这些甚至与第6章中讨论的价值路径(厨房启用的供电过程)相差甚远。
Emergence and Zooming Knowing the internal value pathway is a key step in effectively predicting emergence using any of the approaches discussed in Section 2.6.
知晓内在价值路径是使用2.6节中讨论的任何方法有效预测涌现的关键步骤。
Figure 5.16 suggests the emergence of function of the pump.
图5.16显示了泵的功能的出现。
The pre-process operand is the low-pressure water, and the post-process valuerelated operand is the high-pressure water.
前处理操作数为低压水，后处理评价操作数为高压水。
In the view on the left, all of the internal operands are shown connecting to their associated internal processes.
在左边的视图中，显示了所有内部操作数，它们连接到与其相关的内部进程。
The right side of Figure 5.16 shows the pressurizing process emerging, with the internal processes suppressed and the internal and external operands simply attached to the emergent process.
图5.16的右侧显示了出现的加压过程，内部过程被抑制，内部和外部操作数仅仅附着在紧急过程上。
Just like entities of form, process also has a whole part relationship.
过程和形式的实体一样，也具有整体的部分关系。
The emergence of a system is the smaller to larger whole part relationship.
系统的出现是小到大的整体关系。
Zooming is the larger to smaller relationship.
缩放是从大到小的关系。
If we read Figure 5.16 from right to left, we see how the pressurizing process is zoomed.
如果我们从右至左阅读图5.16，我们可以看到加压过程是如何放大的。
In zooming, we must identify not only the internal processes themselves but also how the external and internal operands interact with those processes.
在缩放过程中，我们不仅要识别内部过程本身，还要识别外部和内部操作数如何与这些过程交互。
A final approach to analyzing the functional architecture and predicting emergence is to  project the functional architecture onto only the processes.
分析功能体系结构和预测出现的最后一种方法是只将功能体系结构投影到流程上。
This makes the way we view the operands as interactions more implicit.
这使得我们将操作数视为交互的方式更加隐式。
For simple flow-through systems, this can sometimes be done by inspection, but for more general systems it is best to apply the methodology of Box 5.8.
对于简单的流通系统，有时可以通过检查来完成，但对于更一般的系统，最好采用方框5.8的方法。
Figure 5.17 is an OPM showing the projection of the pump onto the processes.
图5.17是一个OPM，显示了泵在流程上的投影。
The method of Box 5.8 has been used, and the outcome has been converted back into an OPM diagram.
使用了Box 5.8的方法，并将结果转换回OPM图。
Now the arrows between processes are open-headed (as they were in Chapter 4) and are labeled with the operand that links the processes.
现在进程之间的箭头是开放的(就像在第4章中那样)，并且用连接进程的操作数标记。
But these links now represent interactions among functions, not structure of form.
但是这些链接现在代表的是功能之间的相互作用，而不是形式的结构。
Functional Architecture in Software Systems In principle, the functional architecture of software systems can be represented in the same way as any general system.
软件系统的功能体系结构原则上，软件系统的功能体系结构可以用与任何一般系统相同的方式表示。
Software engineers are comfortable with the functional domain, and they implement code (the form) only because it meets the demands of function.
软件工程师对功能领域很熟悉，他们实现代码(表单)只是因为它满足功能的需求。
In practice, however, information systems are dynamic in structure and behavior and are therefore challenging to conceive as static architectures.
然而，在实践中，信息系统在结构和行为上是动态的，因此很难将其设想为静态架构。
In software, the functions (as we define them) are of two types.
在软件中，函数(我们定义它们)有两种类型。
There are computational statements (A = B + C), but there are also functions (as we define them) that dynamically allocate control (if...
有计算语句(A = B + C)，但也有函数(正如我们定义的)动态分配控制(如果…
, then...).
,然后……)。
If there are functions, there must be operands: explicit variables used for computation, and more implicit control tokens used for control functions.
如果有函数，则必须有操作数:用于计算的显式变量，以及用于控制函数的更多隐式控制令牌。
The interactions produce the data interaction and control interactions among processes, respectively.
这些交互作用分别产生过程之间的数据交互作用和控制交互作用。
We can reverse-engineer bubblesort to show the functional architecture (Figure 5.19).
我们可以对bubblesort进行反向工程，以显示功能架构(图5.19)。
As suggested by the procedure, we start with the internal processes and operands identified in Figure 5.11.
正如过程所建议的，我们从图5.11中标识的内部进程和操作数开始。
This includes the value-related operand, which is the array in the final sorted state.
这包括与值相关的操作数，它是最终排序状态的数组。
One of the advantages of matrix-like representations is that it is possible to compute on them.
类矩阵表示的优点之一是可以对它们进行计算。
For example, the DSM community has created algorithms to sort and band the DSM.
例如，DSM社区已经创建了对DSM进行排序和归类的算法。
[3] Here we will introduce the ideas that the DSM can be broken into arrays and that projection operators can be developed.
在这里，我们将介绍DSM可以分解成阵列和投影算子可以发展的思想。
The frst step in this projection is to create the DSM: PP PO OP OO That is, the array is broken into four blocks, with the process-process (PP) block in the upper left and the operand-operand (OO) block in the lower right.
这个投影的第一步是创建DSM: PP PO OP OO，也就是说，数组被分成四个块，进程-进程(PP)块在左上方，操作数-操作数(OO)块在右下方。
The PP array is diagonal and simply contains an identifer for each process on the diagonal.
PP数组是对角的，只包含对角上每个进程的标识符。
Likewise, the OO array is diagonal with identifers for each operand.
同样，OO数组是对角的，每个操作数都有标识。
The process-operand (PO) array has been developed (Box 5.7).
进程-操作数(PO)数组已经被开发(Box 5.7)。
The operand-process (OP) array is created by the following rules, as shown in Figure 5.18: Form the transpose of the PO array.
操作进程(OP)数组由以下规则创建，如图5.18所示:形成PO数组的转置。
Remove the primes from the create operator (c). Add primes to the destroy operator (d ).
从create操作符(c)中删除质数。在destroy操作符(d)中添加质数。
Leave the affect (a) and instrument (I) operators the same.
保持影响(a)和仪器(I)操作人员不变。
Then form the array PPoperand = PP OO OP by symbolic matrix multiplication.
然后通过符号矩阵乘法形成数组PPoperand = PP OO OP。
This will create a projection of the operands onto the processes.
这将创建操作数到进程的投影。
This will produce a nearly symmetric PPoperand matrix, which indicates no causality.
这将产生一个接近对称的PPoperand矩阵，表明没有因果关系。
If you are interested in causality (for example, in what precedes and causes what), simply set to zero any term with a prime ( ) in it.
如果您对因果关系感兴趣(例如，在前面和导致什么)，只需将其中含有素数()的任何项设置为零。
This will leave a causal matrix that is not symmetric and can be interpreted by the normal DSM convention that an entry suggests flow from the column heading to the row heading
这将留下一个不对称的因果矩阵，并且可以通过正常的DSM惯例(条目表示从列标题流到行标题)来解释

We then identify missing processes: only importing and exporting, as well as operands that are missing, which include the internal variable called array length, and the external operands: the external unsorted array, the external length of the array, and the external sorted array, which is delivered across the system boundary to create benefit.
然后我们确定丢失的过程:只导入和导出,以及丢失的操作数,其中包括内部变量数组长度,和外部操作数:外部无序数组,数组的外部长度,和外部排序的数组,这是交付在系统边界创造效益。
We can then trace the pathway from the external operands, through importing, looping, testing, and exchanging to exporting.
然后，我们可以跟踪从外部操作数到导入、循环、测试和交换到导出的路径。
This defines the functional architecture.
这定义了功能架构。
Some new features appear in the functional architecture.
功能架构中出现了一些新特性。
The operand for internal array length is not destroyed by the looping (I) or looping (J) processes, but rather becomes an instrument of looping.
用于内部数组长度的操作数不会被循环(I)或循环(J)进程销毁，而是变成了一种循环工具。
In general, operands that are created during operation can later become instruments.
一般来说，在操作过程中创建的操作数以后可以成为工具。
We also see the first appearance of a decomposition of an operand into its parts.
我们还看到了将操作数分解为各个部分的第一次出现。
In any given exchange, only two elements of the array are affected, not the entire array.
在任何给定的交换中，数组中只有两个元素会受到影响，而不是整个数组。
This analysis also reveals another new issue: There must be an operand that originates in the testing process, which otherwise has only instruments attached to it.
这个分析还揭示了另一个新问题:必须有一个在测试过程中产生的操作数，否则就只有附加在它上面的仪器。
The missing operand is part of the command flow of the routine.
缺少的操作数是例程的命令流的一部分。
Figure 5.19 suggests that a control token created by the testing process is used by the exchanging process to decide whether to exchange the two array elements.
图5.19表明，交换过程使用测试过程创建的控制令牌来决定是否交换两个数组元素。
Now that we have introduced the idea of a control token, we realize that the two looping processes must also create such tokens, in addition to their more explicit roll of incrementing
既然我们已经引入了控制令牌的思想，那么我们就认识到，除了更显式的增量之外，两个循环进程还必须创建这样的令牌

the I or J variables.
I或J变量。
Figure 5.19 shows the J looping process creating a token that passes control to either testing or I looping.
图5.19显示了创建将控制权传递给测试或I循环的令牌的J循环过程。
I looping passes control to either J looping or exporting.
I循环将控制传递给J循环或导出。
This example reveals the nature of the command interactions that exist in software, in parallel with the data interactions.
这个示例揭示了存在于软件中的命令交互的性质，并与数据交互并行。
In general, information systems of all kinds have some equivalent parallelism between control and data interactions.
一般来说，所有类型的信息系统在控制和数据交互之间都具有某种等价的并行性。
In summary: The entities of internal function, the internal processes, and the interactions of operands among processes establish the functional architecture.
总而言之:内部功能实体、内部流程和流程之间操作数的交互建立了功能架构。
Representation of internal function is not unique and can depend both on interpretation and on the style of representation.
内部功能的表现不是唯一的，可以依赖于解释和表现风格。
In general, the functional architecture will contain a value pathway of internal operands and processes along which the value-related external function emerges.
一般来说，功能架构将包含内部操作数和过程的价值路径，与价值相关的外部功能将沿着此路径出现。
We zoom the external function to identify the internal processes and operands.
我们放大外部函数以识别内部进程和操作数。
Diagrams and tables showing functional interactions can be simplified using projections, in which interactions between processes are indicated by shared operands.
显示功能交互的图表和表格可以使用投影来简化，在投影中，进程之间的交互通过共享操作数来表示。
5.6 Secondary Value-Related External and Internal Functions Once a system delivers its primary value-related function, there is no reason why it should not also be designed to deliver other secondary value-related functions.
5.6与价值有关的次要外部和内部职能一个系统一旦履行了其与价值有关的主要职能，就没有理由不把它设计成履行其他与价值有关的次要职能。
Team X could produce the design and secondarily create reports to document the decision.
团队X可以生成设计，然后创建报告来记录决策。
The circulatory system could return carbon dioxide to the lungs, in addition to delivering oxygen.
循环系统除了输送氧气外，还可以将二氧化碳送回肺部。
The operational amplifier could filter high-frequency noise, in addition to amplifying.
运算放大器除了能放大外，还能滤除高频噪声。
It is important to identify these secondary functions, because they are expected by customers and are a source of competitive advantage.
识别这些次要功能很重要，因为它们是客户所期望的，也是竞争优势的来源。
Question 5d of Table 5.1 is What are the other important secondary value-related external functions?
表5.1的问题5d是什么是其他重要的次要价值相关的外部功能?
These other value-related external functions must also emerge from the internal processes.
这些其他与价值相关的外部功能也必须从内部过程中产生。
The procedure to address this question is just to repeatedly apply the reasoning for the primary value-related function to these secondary functions.
解决这个问题的过程就是将与主要价值相关的函数的推理反复应用到次要函数上。
The centrifugal pump could have secondary value-related functions.
离心泵可具有二次价值相关功能。
Many water pumps have a slinger to sling water that leaks through the rotating seal away from entering the electric motor.
许多水泵都有一个吊具，用来吊运通过旋转密封泄漏的水，使其不能进入电动机。
The pump could also include a pressure sensor that indicates the outlet pressure of the water, a measure of the property associated with delivery of the primary value.
该泵还可以包括压力传感器，用于指示水的出口压力，即与初级值的输出相关的属性的测量值。
Figure 5.20 shows
图5.20显示了
the two secondary value-related functions.
这两个次要的价值相关功能。
One appears along the principal value pathway, the other on its own pathway.
一个出现在主价值途径上，另一个出现在它自己的途径上。
In summary: Systems deliver secondary external value-related functions, in addition to the primary value-related function for which the system exists.
总而言之:除了系统存在的主要价值相关功能之外，系统还提供次要的外部价值相关功能。
5.7 Summary Like form, function is a system attribute conceived by the architect.
功能和形式一样，是建筑师构想的系统属性。
It is the actions, activities, operations, and transformations that cause or contribute to performance.
操作、活动、操作和转换导致或促进性能。
Function is made up of a process, which is pure activity, acting on an operand, which is an object changed by the process.
函数由一个进程组成，它是纯活动，作用于一个操作数，操作数是一个被进程改变的对象。
Built systems have a value-related operand, whose change is associated with the delivery of benefit and eventually value.
构建的系统有一个与价值相关的操作数，它的变更与利益和最终价值的交付相关联。
The value of a system occurs when the externally delivered function acts on an external operand across the system boundary.
当外部交付的函数作用于跨系统边界的外部操作数时，系统的值发生。
Externally delivered value-related function and other, secondary value-related functions  emerge from the internal functional architecture, which usually features a value-related pathway.
外部交付的价值相关功能和其他次要的价值相关功能从内部功能架构中产生，通常以价值相关路径为特征。
A complete description of functional architecture includes internal processes and internal operands.
功能架构的完整描述包括内部流程和内部操作数。
A summary of features that contrast form and function appears in Table 5.6.
表5.6列出了对比形式和功能的特点。
In the next chapter, we will present the core idea of system architecture: the allocation of physical/informational function to elements of form.
在下一章中，我们将介绍系统架构的核心思想:为表单元素分配物理/信息功能。

