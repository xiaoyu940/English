前言

A particularly promising trend that has been taking place in healthcare is the marriage of biomedical research with engineering practices.
在医疗保健领域出现的一个特别有希望的趋势是生物医学研究与工程实践的结合。
A friend of mine, an engineer, recently described to me a meeting that took place at one of America s most prestigious universities between the faculties of the engineering department and the cardiology department exploring just such opportunities.
我的一位工程师朋友最近向我描述了在美国最著名的一所大学，工程系和心理系的院系正在探索这样的机会。
Having decided to focus on constructing a practicable mechanical human heart, the head of cardiology began his presentation with a description of the properties of the human heart.
在决定集中精力建造一个可行的人类机械心脏之后，心脏病学的负责人开始了他的报告，描述了人类心脏的特性。
Almost immediately an engineer interrupted, asking Does it have to be in your chest?
一个工程师几乎立刻打断了他，问他是不是一定要放在胸口?
Could it be, say, in your thigh where it would be easier to reach?
是不是在你的大腿上，那里比较容易够到?
No one in the room had ever considered that possibility.
房间里没有人考虑过这种可能性。
Nonetheless, the presentation continued.
尽管如此，演示仍在继续。
Soon another interruption occurred;
不久，另一个干扰出现了;
this time it was another engineer asking, Instead of just one heart could you have three or four small hearts integrated in a distributed system?
这次是另一个工程师问，你能不能在一个分布式系统中集成三到四个小心脏而不是一个心脏?
No one had thought of that either.
也没有人想到这一点。
System Architecture, so insightfully presented in this book by three of the field s most highly regarded leaders, is about asking and answering just such questions.
在这本书中，由该领域三位最受尊敬的领导人所提出的系统架构就是关于提出和回答这样的问题。
In my own career I have encountered system architecture questions in fields ranging from engineering to business to government.
在我自己的职业生涯中，我在工程、商业和政府等领域遇到过系统架构问题。
When established practices of the field of system architecture are applied, far superior outcomes seem to result.
当应用系统架构领域的既定实践时，似乎会产生远为优越的结果。
Applying such practices has not always been the case.
应用这种做法并不总是如此。
Early in my career I recall asking various of my colleagues who were working together on a guided missile program why they had chosen a particular design approach for their specific element of the product.
我记得在我职业生涯的早期，我曾问过很多同事，他们一起在一个导弹项目中工作，为什么他们要为产品的特定元素选择一种特定的设计方法。
One replied, Because it is the lowest weight.
一个人回答说:“因为它的重量最低。”
Another assured me that his part would have the lowest radar cross-section.
另一个人向我保证，他那部分的雷达横截面是最低的。
Still another answered because her component would be less costly.
还有一个回答，因为她的组件更便宜。
And yet another had focused on minimizing volume.
而另一个则关注于体积最小化。
And so it went.
就这样。
What was missing?
遗失了什么?
The answer is a system architect.
答案是系统架构师。
This shortcoming is too often encountered, usually in more subtle ways.
这个缺点是经常遇到的，通常以更微妙的方式。
Consider the case of the Near-Sonic Transport aircraft that was in the early stages of development a few years ago.
考虑一下近音速运输机的例子，几年前它还处于发展的早期阶段。
A marketing survey had indicated that airline passengers want to get to their destinations faster.
一项市场调查表明，航空公司乘客希望更快到达目的地。
To an aerodynamicist (my own early field), if one wishes to avoid the penalties of supersonic flight, that translates into more closely approaching Mach One, creeping up on the drag curve into a regime wherein fuel consumption abruptly increases.
对于一个空气动力学家(我自己的早期领域)来说，如果一个人想要避免超音速飞行的惩罚，那就转换成更接近1马赫的速度，在阻力曲线上爬升到一个燃料消耗突然增加的状态。
This was, in fact, the underlying concept of the Near-Sonic Transport.
事实上，这是近声传输的基本概念。
But when viewed from a system architecture perspective, the appropriate question is not how to fly faster;
但是从系统架构的角度来看，合适的问题不是如何飞得更快;
rather, it is how to minimize the time to get from one s home, to the airport, check-in, pass through security, board the aircraft, fly, collect baggage and travel to one s final destination.
相反，它是如何将从某人的家到机场、办理登机手续、通过安检、登机、飞行、领取行李和旅行到他的最终目的地的时间减至最少。
Placed in this context, an even more fundamental question arises: How much will a passenger pay to save five or ten minutes of flying time?
在这种情况下，一个更基本的问题就出现了:为了节省5或10分钟的飞行时间，乘客会花多少钱?
The answer turns out to be, not much and the Near-Sonic Transport aircraft thus met its early, and deserved, demise.
答案是，没有太多，因此近音波运输机早早地就被淘汰了。
There are clearly better
当然还有更好的
